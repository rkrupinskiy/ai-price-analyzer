// AI Price Analyzer - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø (–ü–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ)
// –ù–ò–ö–ê–ö–ò–• –î–ï–ú–û –î–ê–ù–ù–´–• - —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å AI

class Logger {
    constructor() {
        this.logs = [];
        this.maxLogs = 500;
    }
    
    log(level, message, data = null) {
        const timestamp = new Date().toLocaleTimeString('ru-RU');
        const logEntry = {
            timestamp,
            level,
            message,
            data,
            id: Date.now() + Math.random()
        };
        
        this.logs.unshift(logEntry);
        
        if (this.logs.length > this.maxLogs) {
            this.logs = this.logs.slice(0, this.maxLogs);
        }
        
        console.log(`[${level.toUpperCase()}] ${message}`, data || '');
        this.updateLogsDisplay();
    }
    
    updateLogsDisplay() {
        const container = document.getElementById('logsContent');
        if (!container) return;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –≤–∫–ª–∞–¥–∫–∞ –ª–æ–≥–æ–≤
        const logsTab = document.getElementById('logs');
        if (!logsTab || !logsTab.classList.contains('tab-content--active')) return;
        
        this.renderLogs();
    }
    
    renderLogs() {
        const container = document.getElementById('logsContent');
        if (!container) return;
        
        const filter = document.getElementById('logLevel')?.value || 'all';
        const filteredLogs = filter === 'all' ? this.logs : this.logs.filter(log => log.level === filter);
        
        if (filteredLogs.length === 0) {
            container.innerHTML = `
                <div class="empty-logs">
                    <div class="empty-logs__icon">üìã</div>
                    <p>–õ–æ–≥–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å</p>
                </div>
            `;
            return;
        }
        
        container.innerHTML = '';
        
        filteredLogs.slice(0, 100).forEach(log => {
            const entry = document.createElement('div');
            entry.className = `log-entry log-entry--${log.level}`;
            
            entry.innerHTML = `
                <span class="log-entry__time">${log.timestamp}</span>
                <span class="log-entry__level">${log.level.toUpperCase()}</span>
                <span class="log-entry__message">${log.message}</span>
            `;
            
            container.appendChild(entry);
        });
        
        container.scrollTop = 0;
    }
    
    clear() {
        this.logs = [];
        this.renderLogs();
    }
}

// –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å serverless —Ñ—É–Ω–∫—Ü–∏–µ–π OpenAI
class ServerlessAIClient {
    constructor(apiKey, endpoint = '/api/openai') {
        this.apiKey = apiKey;
        this.endpoint = endpoint;
    }
    
    async callAI(messages, options = {}) {
        if (!this.apiKey) {
            throw new Error('OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        }
        
        const response = await fetch(this.endpoint, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                apiKey: this.apiKey,
                messages,
                model: options.model || 'gpt-4o',
                temperature: options.temperature || 0.1,
                maxTokens: options.maxTokens || 3000
            })
        });
        
        if (!response.ok) {
            const errorData = await response.json().catch(() => ({}));
            throw new Error(`API Error ${response.status}: ${errorData.error || response.statusText}`);
        }
        
        const data = await response.json();
        return data.choices[0].message.content;
    }
    
    async testConnection() {
        try {
            const messages = [{
                role: 'user',
                content: '–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: "—Ä–∞–±–æ—Ç–∞–µ—Ç"'
            }];
            
            const response = await this.callAI(messages);
            return { success: true, response };
        } catch (error) {
            return { success: false, error: error.message };
        }
    }
}

// AI –∞–≥–µ–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
class DataEditingAgent {
    constructor(aiClient) {
        this.aiClient = aiClient;
    }
    
    async processEditCommand(command, products) {
        const prompt = `
–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–µ—Ä–Ω–∏ JSON —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
- name: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
- description: –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
- quantity: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—á–∏—Å–ª–æ)
- purchasePrice: —Ü–µ–Ω–∞ –∑–∞–∫—É–ø–∞ (—á–∏—Å–ª–æ)
- salePrice: —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ (—á–∏—Å–ª–æ)

–ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${command}"

–¢–µ–∫—É—â–∏–µ —Ç–æ–≤–∞—Ä—ã: ${JSON.stringify(products.slice(0, 10))}

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "success": true,
  "productId": "ID –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ null",
  "productName": "–Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞",
  "changes": {
    "quantity": 15,
    "salePrice": 25000
  },
  "explanation": "—á—Ç–æ –∏–º–µ–Ω–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ"
}

–ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ—è—Å–Ω–∞, –≤–µ—Ä–Ω–∏:
{
  "success": false,
  "error": "–æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"
}
        `;
        
        const messages = [{
            role: 'user',
            content: prompt
        }];
        
        const response = await this.aiClient.callAI(messages);
        
        try {
            return JSON.parse(response);
        } catch (error) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç AI –∞–≥–µ–Ω—Ç–∞');
        }
    }
}

// AI –∞–≥–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω —É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
class CompetitorSearchAgent {
    constructor(aiClient) {
        this.aiClient = aiClient;
    }
    
    async searchCompetitorPrices(productName) {
        const prompt = `
–¢—ã –∞–Ω–∞–ª–∏—Ç–∏–∫ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –≤–µ–±-–ø–æ–∏—Å–∫—É. –ù–∞–π–¥–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –Ω–∞ —Ç–æ–≤–∞—Ä "${productName}" —É —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤.

–í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π —Ä–µ–∞–ª—å–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º—É –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.

–ò—â–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–ª–æ—â–∞–¥–∫–∞—Ö:
- Wildberries, Ozon, –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç
- DNS, –ú.–í–∏–¥–µ–æ, –≠–ª—å–¥–æ—Ä–∞–¥–æ
- –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∏—Å—Ç—Ä–∏–±—å—é—Ç–æ—Ä—ã –∏ –º–∞–≥–∞–∑–∏–Ω—ã
- –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—ã

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON:
{
  "success": true,
  "productName": "${productName}",
  "minPrice": 89990,
  "averagePrice": 95000,
  "maxPrice": 120000,
  "currency": "RUB",
  "sitesFound": 6,
  "bestOffer": {
    "site": "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π",
    "price": 89990,
    "url": "https://—Ä–µ–∞–ª—å–Ω–∞—è-—Å—Å—ã–ª–∫–∞.ru/product",
    "availability": "–≤ –Ω–∞–ª–∏—á–∏–∏"
  },
  "allOffers": [
    {
      "site": "Wildberries",
      "price": 92000,
      "url": "https://wb.ru/...",
      "availability": "–≤ –Ω–∞–ª–∏—á–∏–∏"
    }
  ],
  "searchDetails": "–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ 6 —Å–∞–π—Ç–æ–≤, –Ω–∞–π–¥–µ–Ω—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã",
  "timestamp": "${new Date().toISOString()}"
}

–ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω:
{
  "success": false,
  "error": "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞—Ö"
}
        `;
        
        const messages = [{
            role: 'user',
            content: prompt
        }];
        
        const response = await this.aiClient.callAI(messages);
        
        try {
            return JSON.parse(response);
        } catch (error) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞');
        }
    }
}

// AI –∞–≥–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞ Avito
class AvitoSearchAgent {
    constructor(aiClient) {
        this.aiClient = aiClient;
    }
    
    async searchAvitoUsed(productName) {
        const prompt = `
–ù–∞–π–¥–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –Ω–∞ –±/—É —Ç–æ–≤–∞—Ä "${productName}" –Ω–∞ Avito.ru –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏.

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ü–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –Ω–∞ avito.ru
- –ü–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏
- –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–µ–Ω–µ –æ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π
- –†–µ–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON:
{
  "success": true,
  "productName": "${productName}",
  "minPrice": 45000,
  "averagePrice": 52000,
  "currency": "RUB",
  "totalFound": 25,
  "searchUrl": "https://www.avito.ru/rossiya?q=${encodeURIComponent(productName)}&s=104",
  "bestOffer": {
    "title": "–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π",
    "price": 45000,
    "location": "–ì–æ—Ä–æ–¥",
    "url": "https://avito.ru/—Ä–µ–∞–ª—å–Ω–∞—è-—Å—Å—ã–ª–∫–∞",
    "seller": "—Ç–∏–ø –ø—Ä–æ–¥–∞–≤—Ü–∞",
    "condition": "—Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
  },
  "allOffers": [
    {
      "title": "–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
      "price": 47000,
      "location": "–ú–æ—Å–∫–≤–∞",
      "url": "https://avito.ru/moskva/...",
      "seller": "—á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ",
      "condition": "—Ö–æ—Ä–æ—à–µ–µ"
    }
  ],
  "timestamp": "${new Date().toISOString()}"
}

–ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:
{
  "success": false,
  "error": "–ë/—É —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ Avito"
}
        `;
        
        const messages = [{
            role: 'user',
            content: prompt
        }];
        
        const response = await this.aiClient.callAI(messages);
        
        try {
            return JSON.parse(response);
        } catch (error) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–∞ Avito');
        }
    }
}

// –ö–ª–∞—Å—Å –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
class VoiceController {
    constructor() {
        this.recognition = null;
        this.isListening = false;
        this.isSupported = 'webkitSpeechRecognition' in window || 'SpeechRecognition' in window;
        this.language = 'ru-RU';
        this.onResult = null;
        this.onError = null;
        this.onStart = null;
        this.onEnd = null;
    }
    
    init() {
        if (!this.isSupported) {
            throw new Error('–ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
        }
        
        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        this.recognition = new SpeechRecognition();
        
        this.recognition.lang = this.language;
        this.recognition.continuous = false;
        this.recognition.interimResults = false;
        this.recognition.maxAlternatives = 1;
        
        this.recognition.onstart = () => {
            this.isListening = true;
            if (this.onStart) this.onStart();
        };
        
        this.recognition.onend = () => {
            this.isListening = false;
            if (this.onEnd) this.onEnd();
        };
        
        this.recognition.onresult = (event) => {
            const result = event.results[event.results.length - 1];
            if (result.isFinal) {
                const transcript = result[0].transcript.toLowerCase().trim();
                if (this.onResult) this.onResult(transcript);
            }
        };
        
        this.recognition.onerror = (event) => {
            this.isListening = false;
            if (this.onError) this.onError(event.error);
        };
    }
    
    start() {
        if (this.recognition && !this.isListening) {
            try {
                this.recognition.start();
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:', error);
            }
        }
    }
    
    stop() {
        if (this.recognition && this.isListening) {
            this.recognition.stop();
        }
    }
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class AIPriceAnalyzer {
    constructor() {
        this.products = [];
        this.selectedProducts = new Set();
        this.searchHistory = [];
        this.currentSearch = null;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        this.settings = {
            openaiApiKey: '',
            gptModel: 'gpt-4o',
            serverlessEndpoint: '/api/openai',
            voiceEnabled: false,
            voiceLanguage: 'ru-RU',
            competitorSearchPrompt: '',
            avitoSearchPrompt: '',
            editPrompt: ''
        };
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        this.logger = new Logger();
        this.aiClient = null;
        this.dataEditingAgent = null;
        this.competitorSearchAgent = null;
        this.avitoSearchAgent = null;
        this.voiceController = new VoiceController();
        
        this.init();
    }
    
    init() {
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => this.setupApplication());
        } else {
            this.setupApplication();
        }
    }
    
    setupApplication() {
        try {
            this.setupEventListeners();
            this.setupTabs();
            this.setupVoiceCommands();
            this.updateUI();
            this.logger.log('success', '–°–∏—Å—Ç–µ–º–∞ AI Price Analyzer –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ');
        } catch (error) {
            this.logger.log('error', `–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${error.message}`);
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        }
    }
    
    setupEventListeners() {
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–µ —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
        
        // –ò–º–ø–æ—Ä—Ç/—ç–∫—Å–ø–æ—Ä—Ç
        this.safeBindEvent('importBtn', 'click', () => {
            const input = document.getElementById('importFile');
            if (input) input.click();
        });
        this.safeBindEvent('importFirstFileBtn', 'click', () => {
            const input = document.getElementById('importFile');
            if (input) input.click();
        });
        this.safeBindEvent('importFile', 'change', (e) => this.handleFileImport(e));
        this.safeBindEvent('exportExcelBtn', 'click', () => this.exportToExcel());
        this.safeBindEvent('exportCsvBtn', 'click', () => this.exportToCSV());
        
        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏
        this.safeBindEvent('addProductBtn', 'click', () => this.showAddProductModal());
        this.safeBindEvent('addFirstProductBtn', 'click', () => this.showAddProductModal());
        this.safeBindEvent('saveProductBtn', 'click', () => this.saveNewProduct());
        
        // –í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤
        this.safeBindEvent('selectAllBtn', 'click', () => this.selectAllProducts());
        this.safeBindEvent('deselectAllBtn', 'click', () => this.deselectAllProducts());
        this.safeBindEvent('selectAllCheckbox', 'change', (e) => this.toggleSelectAll(e.target.checked));
        
        // –ü–æ–∏—Å–∫
        this.safeBindEvent('bulkSearchCompetitorBtn', 'click', () => this.searchCompetitorPrices());
        this.safeBindEvent('bulkSearchUsedBtn', 'click', () => this.searchUsedPrices());
        this.safeBindEvent('clearResultsBtn', 'click', () => this.clearResults());
        this.safeBindEvent('cancelSearchBtn', 'click', () => this.cancelSearch());
        
        // AI –¥–∏–∞–ª–æ–≥
        this.safeBindEvent('sendCommandBtn', 'click', () => this.sendAICommand());
        this.safeBindEvent('userInput', 'keydown', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                this.sendAICommand();
            }
        });
        this.safeBindEvent('voiceInputBtn', 'click', () => this.toggleVoiceInput());
        this.safeBindEvent('voiceBtn', 'click', () => this.toggleVoiceInput());
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        this.safeBindEvent('saveSettingsBtn', 'click', () => this.saveSettings());
        this.safeBindEvent('resetSettingsBtn', 'click', () => this.resetSettings());
        this.safeBindEvent('testOpenAIBtn', 'click', () => this.testOpenAI());
        this.safeBindEvent('testVoiceBtn', 'click', () => this.testVoice());
        
        // –ò—Å—Ç–æ—Ä–∏—è –∏ –ª–æ–≥–∏
        this.safeBindEvent('clearHistoryBtn', 'click', () => this.clearHistory());
        this.safeBindEvent('exportHistoryBtn', 'click', () => this.exportHistory());
        this.safeBindEvent('clearLogsBtn', 'click', () => this.logger.clear());
        this.safeBindEvent('exportLogsBtn', 'click', () => this.exportLogs());
        this.safeBindEvent('logLevel', 'change', () => this.logger.renderLogs());
        this.safeBindEvent('historyFilter', 'change', () => this.renderHistory());
        
        // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('modal-close') || 
                e.target.classList.contains('modal__backdrop')) {
                this.hideAllModals();
            }
        });
        
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                this.hideAllModals();
            }
        });
        
        this.logger.log('success', '–í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø–æ–¥–∫–ª—é—á–µ–Ω—ã');
    }
    
    safeBindEvent(elementId, event, handler) {
        const element = document.getElementById(elementId);
        if (element) {
            element.addEventListener(event, handler);
            this.logger.log('info', `–ü–æ–¥–∫–ª—é—á–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ${event} –¥–ª—è ${elementId}`);
        } else {
            this.logger.log('warning', `–≠–ª–µ–º–µ–Ω—Ç ${elementId} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${event}`);
        }
    }
    
    setupTabs() {
        const tabButtons = document.querySelectorAll('.tab-btn');
        
        if (tabButtons.length === 0) {
            this.logger.log('error', '–ö–Ω–æ–ø–∫–∏ –≤–∫–ª–∞–¥–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }
        
        tabButtons.forEach(button => {
            button.addEventListener('click', (e) => {
                e.preventDefault();
                const tabId = button.dataset.tab;
                
                this.logger.log('info', `–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É: ${tabId}`);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
                tabButtons.forEach(btn => btn.classList.remove('tab-btn--active'));
                button.classList.add('tab-btn--active');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                const tabContents = document.querySelectorAll('.tab-content');
                tabContents.forEach(content => {
                    content.classList.remove('tab-content--active');
                });
                
                const targetContent = document.getElementById(tabId);
                if (targetContent) {
                    targetContent.classList.add('tab-content--active');
                    this.onTabActivated(tabId);
                } else {
                    this.logger.log('error', `–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–∫–∏ ${tabId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
                }
            });
        });
        
        this.logger.log('success', `–ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –¥–ª—è ${tabButtons.length} –≤–∫–ª–∞–¥–æ–∫`);
    }
    
    onTabActivated(tabId) {
        this.logger.log('info', `–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –≤–∫–ª–∞–¥–∫–∞: ${tabId}`);
        
        switch (tabId) {
            case 'products':
                this.renderProducts();
                break;
            case 'ai-dialog':
                // AI –¥–∏–∞–ª–æ–≥ —É–∂–µ –≥–æ—Ç–æ–≤
                break;
            case 'search-history':
                this.renderHistory();
                break;
            case 'settings':
                this.renderSettings();
                break;
            case 'logs':
                this.logger.renderLogs();
                break;
        }
    }
    
    setupVoiceCommands() {
        if (!this.voiceController.isSupported) {
            this.logger.log('warning', '–ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
            return;
        }
        
        try {
            this.voiceController.init();
            
            this.voiceController.onStart = () => {
                this.logger.log('info', '–ù–∞—á–∞—Ç–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞');
                const btn = document.getElementById('voiceBtn');
                if (btn) {
                    btn.classList.add('voice-active');
                    btn.textContent = 'üé§ –°–ª—É—à–∞—é...';
                }
            };
            
            this.voiceController.onEnd = () => {
                this.logger.log('info', '–ó–∞–≤–µ—Ä—à–µ–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞');
                const btn = document.getElementById('voiceBtn');
                if (btn) {
                    btn.classList.remove('voice-active');
                    btn.textContent = 'üé§ –ì–æ–ª–æ—Å';
                }
            };
            
            this.voiceController.onResult = (transcript) => {
                this.logger.log('info', `–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: "${transcript}"`);
                this.processVoiceCommand(transcript);
            };
            
            this.voiceController.onError = (error) => {
                this.logger.log('error', `–û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: ${error}`);
            };
            
            this.logger.log('success', '–ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
        } catch (error) {
            this.logger.log('error', `–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥: ${error.message}`);
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
    async handleFileImport(event) {
        const file = event.target.files[0];
        if (!file) return;
        
        this.logger.log('info', `–ò–º–ø–æ—Ä—Ç —Ñ–∞–π–ª–∞: ${file.name}`);
        
        try {
            if (file.name.endsWith('.csv')) {
                await this.importCSV(file);
            } else if (file.name.endsWith('.xlsx') || file.name.endsWith('.xls')) {
                await this.importExcel(file);
            } else {
                throw new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞');
            }
            
            this.updateUI();
            this.logger.log('success', `–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: ${this.products.length} —Ç–æ–≤–∞—Ä–æ–≤`);
            this.showNotification('–£—Å–ø–µ—Ö', `–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${this.products.length} —Ç–æ–≤–∞—Ä–æ–≤`);
            
        } catch (error) {
            this.logger.log('error', `–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ${error.message}`);
            this.showNotification('–û—à–∏–±–∫–∞', `–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª: ${error.message}`);
        }
        
        event.target.value = '';
    }
    
    async importCSV(file) {
        const text = await file.text();
        const lines = text.split('\n').filter(line => line.trim());
        
        if (lines.length < 2) {
            throw new Error('–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö');
        }
        
        const headers = lines[0].split(',').map(h => h.trim().replace(/"/g, ''));
        const products = [];
        
        for (let i = 1; i < lines.length; i++) {
            const values = lines[i].split(',').map(v => v.trim().replace(/"/g, ''));
            if (values.length >= 3) {
                products.push({
                    id: Date.now() + i,
                    name: values[0] || `–¢–æ–≤–∞—Ä ${i}`,
                    description: values[1] || '',
                    quantity: parseInt(values[2]) || 1,
                    purchasePrice: parseFloat(values[3]) || 0,
                    salePrice: parseFloat(values[4]) || 0,
                    competitorNewPrice: null,
                    competitorUsedPrice: null,
                    lastUpdated: null
                });
            }
        }
        
        this.products = products;
    }
    
    async importExcel(file) {
        if (!window.XLSX) {
            throw new Error('–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ XLSX –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        }
        
        const data = await file.arrayBuffer();
        const workbook = XLSX.read(data, { type: 'array' });
        const sheetName = workbook.SheetNames[0];
        const sheet = workbook.Sheets[sheetName];
        const jsonData = XLSX.utils.sheet_to_json(sheet);
        
        if (jsonData.length === 0) {
            throw new Error('–§–∞–π–ª Excel –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö');
        }
        
        const products = [];
        
        jsonData.forEach((row, index) => {
            const keys = Object.keys(row);
            products.push({
                id: Date.now() + index,
                name: row[keys[0]] || `–¢–æ–≤–∞—Ä ${index + 1}`,
                description: row[keys[1]] || '',
                quantity: parseInt(row[keys[2]]) || 1,
                purchasePrice: parseFloat(row[keys[3]]) || 0,
                salePrice: parseFloat(row[keys[4]]) || 0,
                competitorNewPrice: null,
                competitorUsedPrice: null,
                lastUpdated: null
            });
        });
        
        this.products = products;
    }
    
    exportToCSV() {
        if (this.products.length === 0) {
            this.showNotification('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', '–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
            return;
        }
        
        const headers = [
            '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
            '–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ', 
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
            '–¶–µ–Ω–∞ –∑–∞–∫—É–ø–∞',
            '–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏',
            '–¶–µ–Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ NEW',
            '–¶–µ–Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –±/—É',
            '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ'
        ];
        
        const csvContent = [
            headers.join(','),
            ...this.products.map(product => [
                `"${product.name}"`,
                `"${product.description || ''}"`,
                product.quantity,
                product.purchasePrice || 0,
                product.salePrice || 0,
                product.competitorNewPrice || '',
                product.competitorUsedPrice || '',
                `"${product.lastUpdated || ''}"`
            ].join(','))
        ].join('\n');
        
        this.downloadFile(csvContent, 'ai-price-analysis.csv', 'text/csv');
        this.logger.log('success', '–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV –∑–∞–≤–µ—Ä—à–µ–Ω');
    }
    
    exportToExcel() {
        if (this.products.length === 0) {
            this.showNotification('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', '–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
            return;
        }
        
        if (!window.XLSX) {
            this.showNotification('–û—à–∏–±–∫–∞', '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ XLSX –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
            return;
        }
        
        const ws = XLSX.utils.json_to_sheet(this.products.map(product => ({
            '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞': product.name,
            '–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ': product.description || '',
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': product.quantity,
            '–¶–µ–Ω–∞ –∑–∞–∫—É–ø–∞': product.purchasePrice || 0,
            '–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏': product.salePrice || 0,
            '–¶–µ–Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ NEW': product.competitorNewPrice || '',
            '–¶–µ–Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –±/—É': product.competitorUsedPrice || '',
            '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ': product.lastUpdated || ''
        })));
        
        const wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, 'AI Price Analysis');
        
        XLSX.writeFile(wb, 'ai-price-analysis.xlsx');
        this.logger.log('success', '–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel –∑–∞–≤–µ—Ä—à–µ–Ω');
    }
    
    downloadFile(content, filename, mimeType) {
        const blob = new Blob([content], { type: mimeType });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    }
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏
    showAddProductModal() {
        const modal = document.getElementById('addProductModal');
        if (modal) {
            modal.classList.remove('hidden');
            this.logger.log('info', '–ü–æ–∫–∞–∑–∞–Ω–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞');
        }
    }
    
    saveNewProduct() {
        const name = document.getElementById('newProductName')?.value.trim();
        const description = document.getElementById('newProductDescription')?.value.trim();
        const quantity = parseInt(document.getElementById('newProductQuantity')?.value) || 1;
        const purchasePrice = parseFloat(document.getElementById('newProductPurchasePrice')?.value) || 0;
        const salePrice = parseFloat(document.getElementById('newProductSalePrice')?.value) || 0;
        
        if (!name) {
            this.showNotification('–û—à–∏–±–∫–∞', '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞');
            return;
        }
        
        const newProduct = {
            id: Date.now(),
            name,
            description,
            quantity,
            purchasePrice,
            salePrice,
            competitorNewPrice: null,
            competitorUsedPrice: null,
            lastUpdated: null
        };
        
        this.products.push(newProduct);
        this.updateUI();
        this.hideAllModals();
        
        // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
        const form = document.getElementById('addProductForm');
        if (form) form.reset();
        
        this.logger.log('success', `–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä: ${name}`);
        this.showNotification('–£—Å–ø–µ—Ö', `–¢–æ–≤–∞—Ä "${name}" –¥–æ–±–∞–≤–ª–µ–Ω`);
    }
    
    // –í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤
    selectAllProducts() {
        this.selectedProducts.clear();
        this.products.forEach(product => {
            this.selectedProducts.add(product.id);
        });
        this.updateUI();
        this.logger.log('info', '–í—ã–±—Ä–∞–Ω—ã –≤—Å–µ —Ç–æ–≤–∞—Ä—ã');
    }
    
    deselectAllProducts() {
        this.selectedProducts.clear();
        this.updateUI();
        this.logger.log('info', '–°–Ω—è—Ç–æ –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤');
    }
    
    toggleSelectAll(checked) {
        if (checked) {
            this.selectAllProducts();
        } else {
            this.deselectAllProducts();
        }
    }
    
    // AI –ø–æ–∏—Å–∫ —Ü–µ–Ω
    async searchCompetitorPrices() {
        if (!this.aiClient) {
            this.showNotification('–û—à–∏–±–∫–∞', 'OpenAI API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.');
            return;
        }
        
        const selectedIds = Array.from(this.selectedProducts);
        if (selectedIds.length === 0) {
            this.showNotification('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞');
            return;
        }
        
        await this.performSearch('competitor', selectedIds);
    }
    
    async searchUsedPrices() {
        if (!this.aiClient) {
            this.showNotification('–û—à–∏–±–∫–∞', 'OpenAI API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.');
            return;
        }
        
        const selectedIds = Array.from(this.selectedProducts);
        if (selectedIds.length === 0) {
            this.showNotification('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞');
            return;
        }
        
        await this.performSearch('used', selectedIds);
    }
    
    async performSearch(type, productIds) {
        this.currentSearch = { type, productIds, cancelled: false };
        this.showSearchProgress();
        
        const agent = type === 'competitor' ? this.competitorSearchAgent : this.avitoSearchAgent;
        const total = productIds.length;
        let completed = 0;
        let successful = 0;
        
        this.logger.log('info', `–ù–∞—á–∞—Ç –ø–æ–∏—Å–∫ ${type} –¥–ª—è ${total} —Ç–æ–≤–∞—Ä–æ–≤`);
        
        try {
            for (const productId of productIds) {
                if (this.currentSearch.cancelled) break;
                
                const product = this.products.find(p => p.id === productId);
                if (!product) continue;
                
                this.updateProgress(
                    (completed / total) * 100,
                    `–ü–æ–∏—Å–∫ ${completed + 1}/${total}: ${product.name}`
                );
                
                try {
                    let result;
                    if (type === 'competitor') {
                        result = await agent.searchCompetitorPrices(product.name);
                    } else {
                        result = await agent.searchAvitoUsed(product.name);
                    }
                    
                    if (result.success) {
                        if (type === 'competitor') {
                            product.competitorNewPrice = result.minPrice;
                        } else {
                            product.competitorUsedPrice = result.minPrice;
                        }
                        product.lastUpdated = new Date().toLocaleString('ru-RU');
                        successful++;
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                        this.searchHistory.unshift({
                            id: Date.now() + Math.random(),
                            type,
                            productName: product.name,
                            result,
                            timestamp: new Date().toISOString()
                        });
                        
                        this.logger.log('success', `${type} –ø–æ–∏—Å–∫: –Ω–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ –¥–ª—è ${product.name} - ${result.minPrice} —Ä—É–±.`);
                    } else {
                        this.logger.log('warning', `${type} –ø–æ–∏—Å–∫: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è ${product.name}`);
                    }
                    
                } catch (error) {
                    this.logger.log('error', `–û—à–∏–±–∫–∞ ${type} –ø–æ–∏—Å–∫–∞ –¥–ª—è ${product.name}: ${error.message}`);
                }
                
                completed++;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
                this.renderProducts();
                
                // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await new Promise(resolve => setTimeout(resolve, 1000));
            }
            
            this.logger.log('success', `${type} –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ —Ü–µ–Ω: ${successful}/${total}`);
            this.showNotification('–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω', `–ù–∞–π–¥–µ–Ω–æ —Ü–µ–Ω: ${successful} –∏–∑ ${total}`);
            
        } finally {
            this.hideSearchProgress();
            this.currentSearch = null;
            this.updateUI();
        }
    }
    
    cancelSearch() {
        if (this.currentSearch) {
            this.currentSearch.cancelled = true;
            this.logger.log('info', '–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
        }
    }
    
    clearResults() {
        this.products.forEach(product => {
            product.competitorNewPrice = null;
            product.competitorUsedPrice = null;
            product.lastUpdated = null;
        });
        
        this.searchHistory = [];
        this.updateUI();
        this.logger.log('info', '–í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –æ—á–∏—â–µ–Ω—ã');
        this.showNotification('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—â–µ–Ω—ã');
    }
    
    // AI –¥–∏–∞–ª–æ–≥
    async sendAICommand() {
        const input = document.getElementById('userInput');
        if (!input) return;
        
        const command = input.value.trim();
        
        if (!command) return;
        
        if (!this.aiClient) {
            this.showNotification('–û—à–∏–±–∫–∞', 'OpenAI API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.');
            return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.addDialogMessage('user', command);
        input.value = '';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        const loadingId = this.addDialogMessage('ai', '–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–º–∞–Ω–¥—É...');
        
        try {
            await this.processAICommand(command, loadingId);
        } catch (error) {
            this.updateDialogMessage(loadingId, `–û—à–∏–±–∫–∞: ${error.message}`);
            this.logger.log('error', `–û—à–∏–±–∫–∞ AI –∫–æ–º–∞–Ω–¥—ã: ${error.message}`);
        }
    }
    
    async processAICommand(command, loadingId) {
        const lowerCommand = command.toLowerCase();
        
        if (lowerCommand.includes('–Ω–∞–π–¥–∏ —Ü–µ–Ω—É') && lowerCommand.includes('–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç')) {
            // –ü–æ–∏—Å–∫ —Ü–µ–Ω —É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
            const productName = this.extractProductName(command, '–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç');
            if (productName) {
                this.updateDialogMessage(loadingId, `–ò—â—É —Ü–µ–Ω—ã –Ω–∞ "${productName}" —É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤...`);
                const result = await this.competitorSearchAgent.searchCompetitorPrices(productName);
                
                if (result.success) {
                    this.updateDialogMessage(loadingId, 
                        `–ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ –Ω–∞ "${productName}": ${result.minPrice} —Ä—É–±. (–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ ${result.sitesFound} —Å–∞–π—Ç–∞—Ö)`
                    );
                } else {
                    this.updateDialogMessage(loadingId, `–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ü–µ–Ω—ã –Ω–∞ "${productName}"`);
                }
            } else {
                this.updateDialogMessage(loadingId, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã');
            }
            
        } else if (lowerCommand.includes('–Ω–∞–π–¥–∏') && lowerCommand.includes('–±/—É')) {
            // –ü–æ–∏—Å–∫ –±/—É —Ü–µ–Ω
            const productName = this.extractProductName(command, '–±/—É');
            if (productName) {
                this.updateDialogMessage(loadingId, `–ò—â—É –±/—É —Ç–æ–≤–∞—Ä "${productName}" –Ω–∞ Avito...`);
                const result = await this.avitoSearchAgent.searchAvitoUsed(productName);
                
                if (result.success) {
                    this.updateDialogMessage(loadingId, 
                        `–ù–∞–π–¥–µ–Ω –±/—É —Ç–æ–≤–∞—Ä "${productName}": –æ—Ç ${result.minPrice} —Ä—É–±. (–Ω–∞–π–¥–µ–Ω–æ ${result.totalFound} –æ–±—ä—è–≤–ª–µ–Ω–∏–π)`
                    );
                } else {
                    this.updateDialogMessage(loadingId, `–ù–µ –Ω–∞–π–¥–µ–Ω—ã –±/—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è "${productName}"`);
                }
            } else {
                this.updateDialogMessage(loadingId, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã');
            }
            
        } else if (lowerCommand.includes('–∏–∑–º–µ–Ω–∏') || lowerCommand.includes('—É—Å—Ç–∞–Ω–æ–≤–∏')) {
            // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            this.updateDialogMessage(loadingId, '–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–º–∞–Ω–¥—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
            const result = await this.dataEditingAgent.processEditCommand(command, this.products);
            
            if (result.success) {
                const product = this.products.find(p => p.id == result.productId || p.name === result.productName);
                if (product) {
                    Object.assign(product, result.changes);
                    product.lastUpdated = new Date().toLocaleString('ru-RU');
                    this.updateUI();
                    this.updateDialogMessage(loadingId, `–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ: ${result.explanation}`);
                } else {
                    this.updateDialogMessage(loadingId, '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
                }
            } else {
                this.updateDialogMessage(loadingId, `–û—à–∏–±–∫–∞: ${result.error}`);
            }
            
        } else {
            // –û–±—â–∏–π AI –æ—Ç–≤–µ—Ç
            const messages = [{
                role: 'user', 
                content: `–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ü–µ–Ω —Ç–æ–≤–∞—Ä–æ–≤. –û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å: ${command}`
            }];
            
            const response = await this.aiClient.callAI(messages);
            this.updateDialogMessage(loadingId, response);
        }
    }
    
    extractProductName(command, keyword) {
        const regex = new RegExp(`–Ω–∞–π–¥–∏.*?—Ü–µ–Ω—É.*?–Ω–∞\\s+([^\\s].*?)(?:\\s+${keyword}|$)`, 'i');
        const match = command.match(regex);
        return match ? match[1].trim() : null;
    }
    
    addDialogMessage(type, content) {
        const container = document.getElementById('dialogMessages');
        if (!container) return null;
        
        const messageId = Date.now() + Math.random();
        
        const messageEl = document.createElement('div');
        messageEl.className = `message message--${type}`;
        messageEl.id = `message-${messageId}`;
        
        const avatar = type === 'user' ? 'üë§' : 'ü§ñ';
        
        messageEl.innerHTML = `
            <div class="message__avatar">${avatar}</div>
            <div class="message__content">${content}</div>
        `;
        
        container.appendChild(messageEl);
        container.scrollTop = container.scrollHeight;
        
        return messageId;
    }
    
    updateDialogMessage(messageId, content) {
        const messageEl = document.getElementById(`message-${messageId}`);
        if (messageEl) {
            const contentEl = messageEl.querySelector('.message__content');
            if (contentEl) {
                contentEl.textContent = content;
            }
        }
    }
    
    // –ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    toggleVoiceInput() {
        if (!this.settings.voiceEnabled) {
            this.showNotification('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', '–ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö');
            return;
        }
        
        if (!this.voiceController.isSupported) {
            this.showNotification('–û—à–∏–±–∫–∞', '–ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
            return;
        }
        
        if (this.voiceController.isListening) {
            this.voiceController.stop();
        } else {
            this.voiceController.start();
        }
    }
    
    processVoiceCommand(transcript) {
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –¥–∏–∞–ª–æ–≥
        const input = document.getElementById('userInput');
        if (input) {
            input.value = transcript;
            // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
            this.sendAICommand();
        }
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    renderSettings() {
        const elements = {
            openaiApiKey: document.getElementById('openaiApiKey'),
            gptModel: document.getElementById('gptModel'),
            serverlessEndpoint: document.getElementById('serverlessEndpoint'),
            voiceEnabled: document.getElementById('voiceEnabled'),
            voiceLanguage: document.getElementById('voiceLanguage')
        };
        
        if (elements.openaiApiKey) elements.openaiApiKey.value = this.settings.openaiApiKey;
        if (elements.gptModel) elements.gptModel.value = this.settings.gptModel;
        if (elements.serverlessEndpoint) elements.serverlessEndpoint.value = this.settings.serverlessEndpoint;
        if (elements.voiceEnabled) elements.voiceEnabled.checked = this.settings.voiceEnabled;
        if (elements.voiceLanguage) elements.voiceLanguage.value = this.settings.voiceLanguage;
        
        this.updateSettingsStatus();
    }
    
    saveSettings() {
        const elements = {
            openaiApiKey: document.getElementById('openaiApiKey'),
            gptModel: document.getElementById('gptModel'),
            serverlessEndpoint: document.getElementById('serverlessEndpoint'),
            voiceEnabled: document.getElementById('voiceEnabled'),
            voiceLanguage: document.getElementById('voiceLanguage')
        };
        
        this.settings.openaiApiKey = elements.openaiApiKey?.value.trim() || '';
        this.settings.gptModel = elements.gptModel?.value || 'gpt-4o';
        this.settings.serverlessEndpoint = elements.serverlessEndpoint?.value.trim() || '/api/openai';
        this.settings.voiceEnabled = elements.voiceEnabled?.checked || false;
        this.settings.voiceLanguage = elements.voiceLanguage?.value || 'ru-RU';
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI –∫–ª–∏–µ–Ω—Ç–∞
        if (this.settings.openaiApiKey) {
            this.aiClient = new ServerlessAIClient(this.settings.openaiApiKey, this.settings.serverlessEndpoint);
            this.dataEditingAgent = new DataEditingAgent(this.aiClient);
            this.competitorSearchAgent = new CompetitorSearchAgent(this.aiClient);
            this.avitoSearchAgent = new AvitoSearchAgent(this.aiClient);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
        if (this.voiceController.isSupported) {
            this.voiceController.language = this.settings.voiceLanguage;
        }
        
        this.updateSettingsStatus();
        this.updateUI();
        
        this.logger.log('success', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
        this.showNotification('–£—Å–ø–µ—Ö', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    }
    
    resetSettings() {
        this.settings = {
            openaiApiKey: '',
            gptModel: 'gpt-4o',
            serverlessEndpoint: '/api/openai',
            voiceEnabled: false,
            voiceLanguage: 'ru-RU',
            competitorSearchPrompt: '',
            avitoSearchPrompt: '',
            editPrompt: ''
        };
        
        this.aiClient = null;
        this.dataEditingAgent = null;
        this.competitorSearchAgent = null;
        this.avitoSearchAgent = null;
        
        this.renderSettings();
        this.updateUI();
        
        this.logger.log('info', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ —É–º–æ–ª—á–∞–Ω–∏—é');
        this.showNotification('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã');
    }
    
    async testOpenAI() {
        const apiKeyEl = document.getElementById('openaiApiKey');
        const endpointEl = document.getElementById('serverlessEndpoint');
        
        const apiKey = apiKeyEl?.value.trim();
        const endpoint = endpointEl?.value.trim() || '/api/openai';
        
        if (!apiKey) {
            this.showNotification('–û—à–∏–±–∫–∞', '–í–≤–µ–¥–∏—Ç–µ OpenAI API –∫–ª—é—á');
            return;
        }
        
        const statusEl = document.getElementById('openaiStatus');
        if (statusEl) {
            statusEl.textContent = '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...';
            statusEl.className = 'status status--info';
        }
        
        try {
            const testClient = new ServerlessAIClient(apiKey, endpoint);
            const result = await testClient.testConnection();
            
            if (statusEl) {
                if (result.success) {
                    statusEl.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç';
                    statusEl.className = 'status status--success';
                    this.logger.log('success', 'OpenAI API —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ');
                } else {
                    statusEl.textContent = `–û—à–∏–±–∫–∞: ${result.error}`;
                    statusEl.className = 'status status--error';
                    this.logger.log('error', `OpenAI API —Ç–µ—Å—Ç –Ω–µ—É–¥–∞—á–µ–Ω: ${result.error}`);
                }
            }
        } catch (error) {
            if (statusEl) {
                statusEl.textContent = `–û—à–∏–±–∫–∞: ${error.message}`;
                statusEl.className = 'status status--error';
            }
            this.logger.log('error', `–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è OpenAI: ${error.message}`);
        }
    }
    
    testVoice() {
        if (!this.voiceController.isSupported) {
            this.showNotification('–û—à–∏–±–∫–∞', '–ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è');
            return;
        }
        
        const statusEl = document.getElementById('voiceStatus');
        if (statusEl) {
            statusEl.textContent = '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞...';
            statusEl.className = 'status status--info';
        }
        
        try {
            this.voiceController.start();
            setTimeout(() => {
                if (this.voiceController.isListening) {
                    this.voiceController.stop();
                    if (statusEl) {
                        statusEl.textContent = '–ú–∏–∫—Ä–æ—Ñ–æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç';
                        statusEl.className = 'status status--success';
                    }
                } else {
                    if (statusEl) {
                        statusEl.textContent = '–ú–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
                        statusEl.className = 'status status--error';
                    }
                }
            }, 2000);
        } catch (error) {
            if (statusEl) {
                statusEl.textContent = `–û—à–∏–±–∫–∞: ${error.message}`;
                statusEl.className = 'status status--error';
            }
        }
    }
    
    updateSettingsStatus() {
        const openaiStatus = document.getElementById('openaiStatus');
        const voiceStatus = document.getElementById('voiceStatus');
        const apiStatus = document.getElementById('apiStatus');
        
        if (this.settings.openaiApiKey) {
            if (openaiStatus) {
                openaiStatus.textContent = '–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ';
                openaiStatus.className = 'status status--success';
            }
            if (apiStatus) {
                apiStatus.textContent = 'üü¢ API –Ω–∞—Å—Ç—Ä–æ–µ–Ω';
                apiStatus.className = 'status status--success';
            }
        } else {
            if (openaiStatus) {
                openaiStatus.textContent = '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ';
                openaiStatus.className = 'status status--error';
            }
            if (apiStatus) {
                apiStatus.textContent = 'üî¥ API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω';
                apiStatus.className = 'status status--error';
            }
        }
        
        if (voiceStatus) {
            if (this.settings.voiceEnabled && this.voiceController.isSupported) {
                voiceStatus.textContent = '–í–∫–ª—é—á–µ–Ω–æ';
                voiceStatus.className = 'status status--success';
            } else {
                voiceStatus.textContent = '–û—Ç–∫–ª—é—á–µ–Ω–æ';
                voiceStatus.className = 'status status--warning';
            }
        }
    }
    
    // –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞
    renderHistory() {
        const container = document.getElementById('historyContent');
        if (!container) return;
        
        const filter = document.getElementById('historyFilter')?.value || 'all';
        const filteredHistory = filter === 'all' ? 
            this.searchHistory : 
            this.searchHistory.filter(item => item.type === filter);
        
        if (filteredHistory.length === 0) {
            container.innerHTML = `
                <div class="empty-history">
                    <div class="empty-history__icon">üìù</div>
                    <p>–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π AI –∞–≥–µ–Ω—Ç–∞ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å</p>
                </div>
            `;
            return;
        }
        
        container.innerHTML = '';
        
        filteredHistory.slice(0, 50).forEach(item => {
            const historyEl = document.createElement('div');
            historyEl.className = 'history-item';
            
            const typeLabel = item.type === 'competitor' ? '–ü–æ–∏—Å–∫ NEW —Ü–µ–Ω' : '–ü–æ–∏—Å–∫ –±/—É —Ü–µ–Ω';
            
            historyEl.innerHTML = `
                <div class="history-item__header">
                    <span class="history-item__type">${typeLabel}</span>
                    <span class="history-item__timestamp">${new Date(item.timestamp).toLocaleString('ru-RU')}</span>
                </div>
                <div class="history-item__details">
                    –¢–æ–≤–∞—Ä: <strong>${item.productName}</strong><br>
                    ${item.result.success ? 
                        `–ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞: <strong>${item.result.minPrice} —Ä—É–±.</strong><br>
                         –°–∞–π—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: ${item.result.sitesFound || item.result.totalFound || 'N/A'}` :
                        `–†–µ–∑—É–ª—å—Ç–∞—Ç: ${item.result.error}`
                    }
                </div>
                ${item.result.success && item.result.bestOffer ? `
                    <div class="history-item__result">
                        –õ—É—á—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: ${item.result.bestOffer.site || 'N/A'}<br>
                        –¶–µ–Ω–∞: ${item.result.bestOffer.price} —Ä—É–±.<br>
                        ${item.result.bestOffer.url ? `<a href="${item.result.bestOffer.url}" target="_blank">–°—Å—ã–ª–∫–∞</a>` : ''}
                    </div>
                ` : ''}
            `;
            
            container.appendChild(historyEl);
        });
    }
    
    clearHistory() {
        this.searchHistory = [];
        this.renderHistory();
        this.logger.log('info', '–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –æ—á–∏—â–µ–Ω–∞');
    }
    
    exportHistory() {
        if (this.searchHistory.length === 0) {
            this.showNotification('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', '–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞');
            return;
        }
        
        const csvContent = [
            '–î–∞—Ç–∞,–¢–∏–ø,–¢–æ–≤–∞—Ä,–£—Å–ø–µ—Ö,–¶–µ–Ω–∞,–û—à–∏–±–∫–∞',
            ...this.searchHistory.map(item => [
                new Date(item.timestamp).toLocaleString('ru-RU'),
                item.type === 'competitor' ? 'NEW —Ü–µ–Ω—ã' : '–±/—É —Ü–µ–Ω—ã',
                `"${item.productName}"`,
                item.result.success ? '–î–∞' : '–ù–µ—Ç',
                item.result.success ? item.result.minPrice : '',
                item.result.success ? '' : `"${item.result.error}"`
            ].join(','))
        ].join('\n');
        
        this.downloadFile(csvContent, 'ai-search-history.csv', 'text/csv');
        this.logger.log('success', '–ò—Å—Ç–æ—Ä–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞');
    }
    
    exportLogs() {
        if (this.logger.logs.length === 0) {
            this.showNotification('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', '–õ–æ–≥–∏ –ø—É—Å—Ç—ã');
            return;
        }
        
        const csvContent = [
            '–í—Ä–µ–º—è,–£—Ä–æ–≤–µ–Ω—å,–°–æ–æ–±—â–µ–Ω–∏–µ',
            ...this.logger.logs.map(log => [
                log.timestamp,
                log.level,
                `"${log.message}"`
            ].join(','))
        ].join('\n');
        
        this.downloadFile(csvContent, 'ai-system-logs.csv', 'text/csv');
        this.logger.log('success', '–õ–æ–≥–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
    }
    
    // UI –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    updateUI() {
        this.renderProducts();
        this.updateProductsCount();
        this.updateSelectionInfo();
        this.updateBulkActions();
        this.updateSettingsStatus();
    }
    
    renderProducts() {
        const tbody = document.getElementById('productsTableBody');
        const emptyState = document.getElementById('emptyState');
        const tableContainer = document.getElementById('productsTable');
        
        if (!tbody) return;
        
        if (this.products.length === 0) {
            if (tableContainer) tableContainer.style.display = 'none';
            if (emptyState) emptyState.style.display = 'flex';
            return;
        }
        
        if (tableContainer) tableContainer.style.display = 'table';
        if (emptyState) emptyState.style.display = 'none';
        
        tbody.innerHTML = '';
        
        this.products.forEach(product => {
            const row = document.createElement('tr');
            row.dataset.productId = product.id;
            
            if (this.selectedProducts.has(product.id)) {
                row.classList.add('selected');
            }
            
            row.innerHTML = `
                <td class="checkbox-col">
                    <input type="checkbox" class="product-checkbox" 
                           ${this.selectedProducts.has(product.id) ? 'checked' : ''}
                           data-product-id="${product.id}">
                </td>
                <td class="editable-cell" data-field="name" data-product-id="${product.id}">
                    ${product.name}
                </td>
                <td class="editable-cell" data-field="description" data-product-id="${product.id}">
                    ${product.description || ''}
                </td>
                <td class="editable-cell" data-field="quantity" data-product-id="${product.id}">
                    ${product.quantity}
                </td>
                <td class="editable-cell price-cell" data-field="purchasePrice" data-product-id="${product.id}">
                    ${this.formatPrice(product.purchasePrice)}
                </td>
                <td class="editable-cell price-cell" data-field="salePrice" data-product-id="${product.id}">
                    ${this.formatPrice(product.salePrice)}
                </td>
                <td class="price-cell competitor-price">
                    ${product.competitorNewPrice ? this.formatPrice(product.competitorNewPrice) : '‚Äî'}
                </td>
                <td class="price-cell competitor-price">
                    ${product.competitorUsedPrice ? this.formatPrice(product.competitorUsedPrice) : '‚Äî'}
                </td>
                <td class="text-muted">
                    ${product.lastUpdated || '‚Äî'}
                </td>
                <td>
                    <button class="btn btn--sm btn--outline" data-action="delete" data-product-id="${product.id}">
                        üóëÔ∏è
                    </button>
                </td>
            `;
            
            tbody.appendChild(row);
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        tbody.querySelectorAll('.product-checkbox').forEach(checkbox => {
            checkbox.addEventListener('change', (e) => {
                const productId = parseInt(e.target.dataset.productId);
                const row = e.target.closest('tr');
                
                if (e.target.checked) {
                    this.selectedProducts.add(productId);
                    row.classList.add('selected');
                } else {
                    this.selectedProducts.delete(productId);
                    row.classList.remove('selected');
                }
                
                this.updateSelectionInfo();
                this.updateBulkActions();
            });
        });
        
        tbody.querySelectorAll('.editable-cell').forEach(cell => {
            cell.addEventListener('click', () => this.editCell(cell));
        });
        
        tbody.querySelectorAll('button[data-action="delete"]').forEach(button => {
            button.addEventListener('click', (e) => {
                const productId = parseInt(e.target.dataset.productId);
                this.deleteProduct(productId);
            });
        });
    }
    
    editCell(cell) {
        if (cell.classList.contains('editable-cell--editing')) return;
        
        const currentValue = cell.textContent.trim();
        const field = cell.dataset.field;
        const productId = parseInt(cell.dataset.productId);
        
        cell.classList.add('editable-cell--editing');
        
        const input = document.createElement('input');
        input.type = field === 'quantity' || field.includes('Price') ? 'number' : 'text';
        input.className = 'editable-input';
        input.value = field.includes('Price') ? 
            currentValue.replace(/[^\d.,]/g, '').replace(',', '.') : 
            currentValue;
        
        cell.innerHTML = '';
        cell.appendChild(input);
        input.focus();
        input.select();
        
        const saveEdit = () => {
            const newValue = input.value.trim();
            const product = this.products.find(p => p.id === productId);
            
            if (product) {
                if (field === 'quantity') {
                    product[field] = parseInt(newValue) || 0;
                } else if (field.includes('Price')) {
                    product[field] = parseFloat(newValue) || 0;
                } else {
                    product[field] = newValue;
                }
                product.lastUpdated = new Date().toLocaleString('ru-RU');
            }
            
            cell.classList.remove('editable-cell--editing');
            this.renderProducts();
            
            this.logger.log('success', `–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${field} —Ç–æ–≤–∞—Ä–∞ "${product.name}"`);
        };
        
        input.addEventListener('blur', saveEdit);
        input.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                saveEdit();
            } else if (e.key === 'Escape') {
                cell.classList.remove('editable-cell--editing');
                this.renderProducts();
            }
        });
    }
    
    deleteProduct(productId) {
        const product = this.products.find(p => p.id === productId);
        if (!product) return;
        
        if (confirm(`–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä "${product.name}"?`)) {
            this.products = this.products.filter(p => p.id !== productId);
            this.selectedProducts.delete(productId);
            this.updateUI();
            this.logger.log('info', `–£–¥–∞–ª–µ–Ω —Ç–æ–≤–∞—Ä: ${product.name}`);
        }
    }
    
    updateProductsCount() {
        const el = document.getElementById('productsCount');
        if (el) {
            el.textContent = `–¢–æ–≤–∞—Ä–æ–≤: ${this.products.length}`;
        }
    }
    
    updateSelectionInfo() {
        const el = document.getElementById('selectionInfo');
        if (el) {
            el.textContent = `–í—ã–±—Ä–∞–Ω–æ: ${this.selectedProducts.size}`;
        }
        
        const checkbox = document.getElementById('selectAllCheckbox');
        if (checkbox) {
            checkbox.checked = this.selectedProducts.size === this.products.length && this.products.length > 0;
            checkbox.indeterminate = this.selectedProducts.size > 0 && this.selectedProducts.size < this.products.length;
        }
    }
    
    updateBulkActions() {
        const competitorBtn = document.getElementById('bulkSearchCompetitorBtn');
        const usedBtn = document.getElementById('bulkSearchUsedBtn');
        
        const hasSelection = this.selectedProducts.size > 0;
        const hasAPI = !!this.aiClient;
        
        if (competitorBtn) {
            competitorBtn.disabled = !hasSelection || !hasAPI;
        }
        if (usedBtn) {
            usedBtn.disabled = !hasSelection || !hasAPI;
        }
    }
    
    // –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–∏—Å–∫–∞
    showSearchProgress() {
        const el = document.getElementById('searchProgress');
        if (el) {
            el.classList.remove('hidden');
        }
    }
    
    hideSearchProgress() {
        const el = document.getElementById('searchProgress');
        if (el) {
            setTimeout(() => el.classList.add('hidden'), 1000);
        }
    }
    
    updateProgress(percentage, text) {
        const fill = document.getElementById('progressFill');
        const textEl = document.getElementById('progressText');
        
        if (fill) {
            fill.style.width = `${Math.min(100, Math.max(0, percentage))}%`;
        }
        if (textEl) {
            textEl.textContent = text;
        }
    }
    
    // –£—Ç–∏–ª–∏—Ç—ã
    formatPrice(price) {
        if (!price || price === 0) return '0 ‚ÇΩ';
        return new Intl.NumberFormat('ru-RU', {
            style: 'currency',
            currency: 'RUB',
            minimumFractionDigits: 0,
            maximumFractionDigits: 0
        }).format(price);
    }
    
    showNotification(title, message) {
        const titleEl = document.getElementById('notificationTitle');
        const messageEl = document.getElementById('notificationMessage');
        const modal = document.getElementById('notificationModal');
        
        if (titleEl) titleEl.textContent = title;
        if (messageEl) messageEl.textContent = message;
        if (modal) modal.classList.remove('hidden');
    }
    
    hideAllModals() {
        document.querySelectorAll('.modal').forEach(modal => {
            modal.classList.add('hidden');
        });
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let app;

if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        app = new AIPriceAnalyzer();
        window.app = app; // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    });
} else {
    app = new AIPriceAnalyzer();
    window.app = app; // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
}

// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∑—É–º–∞ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
document.addEventListener('touchstart', function() {}, true);