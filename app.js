/**
 * AI Price Analyzer - –ü–û–õ–ù–û–°–¢–¨–Æ –ü–†–û–ó–†–ê–ß–ù–ê–Ø –°–ò–°–¢–ï–ú–ê
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –í–°–Å: –ø—Ä–æ–º–ø—Ç—ã, –∑–∞–ø—Ä–æ—Å—ã, –æ—Ç–≤–µ—Ç—ã, –æ–±—Ä–∞–±–æ—Ç–∫—É
 */

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
const CONFIG = {
    OPENAI_API: 'https://api.openai.com/v1/chat/completions',
    DEFAULT_MODEL: 'gpt-4o',
    MAX_TOKENS: 3000,
    TEMPERATURE: 0.1,
    TEST_PRODUCTS: [
        { name: 'iPhone 15 Pro 128GB', description: '–ù–æ–≤—ã–π iPhone 15 Pro 128GB —á–µ—Ä–Ω—ã–π', quantity: 5, purchasePrice: 85000, salePrice: 95000 },
        { name: 'Samsung Galaxy S24 Ultra', description: 'Samsung Galaxy S24 Ultra 256GB', quantity: 3, purchasePrice: 75000, salePrice: 85000 },
        { name: 'MacBook Air M2', description: 'MacBook Air 13" M2 256GB', quantity: 2, purchasePrice: 95000, salePrice: 110000 },
        { name: 'AirPods Pro 2', description: 'Apple AirPods Pro 2 –ø–æ–∫–æ–ª–µ–Ω–∏–µ', quantity: 10, purchasePrice: 18000, salePrice: 22000 }
    ]
};

// –ö–ª–∞—Å—Å –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
class TransparencyLogger {
    constructor() {
        this.logs = [];
        this.currentOperation = null;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
        this.log('–°–ò–°–¢–ï–ú–ê', '–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞', 'info');
        this.showInitialTransparencyInfo();
    }

    showInitialTransparencyInfo() {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ø–∞–Ω–µ–ª–∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
        this.updatePromptDisplay('–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞. –ü—Ä–æ–º–ø—Ç –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –∑–¥–µ—Å—å –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ OpenAI API.\n\n–ü—Ä–∏–º–µ—Ä —Ç–æ–≥–æ, —á—Ç–æ –≤—ã —É–≤–∏–¥–∏—Ç–µ:\n- –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω\n- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å\n- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞');
        
        this.updateAPIRequestDisplay({
            "info": "JSON –∑–∞–ø—Ä–æ—Å –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å",
            "example": {
                "model": "gpt-4o",
                "messages": [
                    {"role": "system", "content": "—Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç..."},
                    {"role": "user", "content": "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å..."}
                ],
                "temperature": 0.1,
                "max_tokens": 3000
            }
        });
        
        this.updateAPIResponseDisplay('–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI API –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –∑–¥–µ—Å—å –ë–ï–ó –û–ë–†–ê–ë–û–¢–ö–ò\n\n–í—ã —É–≤–∏–¥–∏—Ç–µ:\n- –ü–æ–ª–Ω—ã–π JSON –æ—Ç–≤–µ—Ç\n- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã\n- –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏\n- –í—Å–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ');
        
        this.updateProcessedResultDisplay({
            "info": "–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å",
            "example": {
                "operation": "–ø–æ–∏—Å–∫ —Ü–µ–Ω",
                "success": true,
                "extractedData": "–¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞ AI",
                "appliedToTable": "–∫–∞–∫ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å –∫ —Ç–∞–±–ª–∏—Ü–µ"
            }
        });
    }

    updatePromptDisplay(content) {
        const display = document.getElementById('currentPromptDisplay');
        if (display) {
            display.value = typeof content === 'string' ? content : JSON.stringify(content, null, 2);
        }
    }

    updateAPIRequestDisplay(data) {
        const display = document.getElementById('apiRequestDisplay');
        if (display) {
            display.textContent = JSON.stringify(data, null, 2);
        }
    }

    updateAPIResponseDisplay(content) {
        const display = document.getElementById('apiResponseDisplay');
        if (display) {
            display.textContent = typeof content === 'string' ? content : JSON.stringify(content, null, 2);
        }
    }

    updateProcessedResultDisplay(data) {
        const display = document.getElementById('processedResultDisplay');
        if (display) {
            display.textContent = JSON.stringify(data, null, 2);
        }
    }

    startOperation(operationName, details = '') {
        this.currentOperation = {
            name: operationName,
            startTime: new Date().toISOString(),
            steps: [],
            details
        };
        
        this.log('–û–ü–ï–†–ê–¶–ò–Ø', `üöÄ –ù–ê–ß–ê–õ–û: ${operationName}${details ? ' - ' + details : ''}`, 'ai');
        this.updateTransparencyStatus(`–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: ${operationName}`);
    }

    addStep(stepName, data, stepType = 'info') {
        if (!this.currentOperation) return;
        
        const step = {
            name: stepName,
            timestamp: new Date().toISOString(),
            data: data,
            type: stepType
        };
        
        this.currentOperation.steps.push(step);
        this.log('–®–ê–ì', `${stepName}`, stepType);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if (data && typeof data === 'object') {
            this.log('–î–ê–ù–ù–´–ï', JSON.stringify(data, null, 2), stepType);
        } else if (data) {
            this.log('–î–ê–ù–ù–´–ï', String(data), stepType);
        }
    }

    endOperation(result = null, error = null) {
        if (!this.currentOperation) return;
        
        this.currentOperation.endTime = new Date().toISOString();
        this.currentOperation.duration = new Date(this.currentOperation.endTime) - new Date(this.currentOperation.startTime);
        this.currentOperation.result = result;
        this.currentOperation.error = error;
        
        if (error) {
            this.log('–û–ü–ï–†–ê–¶–ò–Ø', `‚ùå –û–®–ò–ë–ö–ê: ${this.currentOperation.name} - ${error}`, 'error');
        } else {
            this.log('–û–ü–ï–†–ê–¶–ò–Ø', `‚úÖ –ó–ê–í–ï–†–®–ï–ù–û: ${this.currentOperation.name} (${this.currentOperation.duration}ms)`, 'success');
        }
        
        this.currentOperation = null;
        this.updateTransparencyStatus('–ì–æ—Ç–æ–≤–æ –∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—é');
    }

    log(type, message, level = 'info') {
        const logEntry = {
            timestamp: new Date().toISOString(),
            type,
            message,
            level
        };
        
        this.logs.unshift(logEntry);
        if (this.logs.length > 1000) {
            this.logs = this.logs.slice(0, 1000);
        }
        
        this.renderLogs();
        console.log(`[${type}] ${message}`);
    }

    renderLogs() {
        const container = document.getElementById('logContent');
        const filter = document.getElementById('logFilter')?.value || 'all';
        
        if (!container) return;

        let filteredLogs = this.logs;
        if (filter !== 'all') {
            filteredLogs = this.logs.filter(log => {
                switch (filter) {
                    case 'ai': return ['–û–ü–ï–†–ê–¶–ò–Ø', '–®–ê–ì', '–ü–†–û–ú–ü–¢', 'API', '–û–¢–í–ï–¢'].includes(log.type);
                    case 'api': return ['API', '–û–¢–í–ï–¢', '–ó–ê–ü–†–û–°'].includes(log.type);
                    case 'error': return log.level === 'error';
                    default: return true;
                }
            });
        }

        container.innerHTML = '';
        filteredLogs.slice(0, 100).forEach(entry => {
            const entryEl = document.createElement('div');
            entryEl.className = `log-entry log-entry--${entry.level}`;
            
            entryEl.innerHTML = `
                <span class="log-time">${this.formatTime(entry.timestamp)}</span>
                <span class="log-type">${entry.type}</span>
                <span class="log-message">${this.escapeHtml(entry.message)}</span>
            `;
            
            container.appendChild(entryEl);
        });
    }

    updateTransparencyStatus(status) {
        const element = document.getElementById('transparencyStatus');
        if (element) {
            element.textContent = status;
            element.className = 'status status--info';
        }
    }

    formatTime(timestamp) {
        return new Date(timestamp).toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit',
            fractionalSecondDigits: 3
        });
    }

    escapeHtml(text) {
        if (!text) return '';
        const map = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#039;'
        };
        return text.replace(/[&<>"']/g, (m) => map[m]);
    }
}

// –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI API —Å –ø–æ–ª–Ω–æ–π –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
class TransparentOpenAIService {
    constructor(apiKey, model = CONFIG.DEFAULT_MODEL) {
        this.apiKey = apiKey;
        this.model = model;
        this.logger = null;
    }

    setLogger(logger) {
        this.logger = logger;
    }

    async makeRequest(messages, operationName = 'OpenAI –∑–∞–ø—Ä–æ—Å') {
        if (!this.apiKey) {
            throw new Error('OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        }

        if (this.logger) {
            this.logger.startOperation(operationName);
            this.logger.addStep('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞', { model: this.model, messagesCount: messages.length });
        }

        // 1. –ü–û–ö–ê–ó–´–í–ê–ï–ú –ü–†–û–ú–ü–¢
        this.displayPrompt(messages);
        if (this.logger) {
            this.logger.addStep('–ü—Ä–æ–º–ø—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', messages[0]?.content?.substring(0, 200) + '...');
        }

        // 2. –ü–û–ö–ê–ó–´–í–ê–ï–ú JSON –ó–ê–ü–†–û–°
        const requestData = {
            model: this.model,
            messages: messages,
            temperature: CONFIG.TEMPERATURE,
            max_tokens: CONFIG.MAX_TOKENS
        };
        
        this.displayAPIRequest(requestData);
        if (this.logger) {
            this.logger.addStep('JSON –∑–∞–ø—Ä–æ—Å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω', requestData);
        }

        // 3. –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ó–ê–ü–†–û–°
        if (this.logger) {
            this.logger.addStep('–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI API', CONFIG.OPENAI_API);
        }

        try {
            const response = await fetch(CONFIG.OPENAI_API, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${this.apiKey}`
                },
                body: JSON.stringify(requestData)
            });

            if (!response.ok) {
                const errorText = await response.text();
                const error = `HTTP ${response.status}: ${errorText}`;
                if (this.logger) {
                    this.logger.endOperation(null, error);
                }
                throw new Error(error);
            }

            const data = await response.json();
            
            // 4. –ü–û–ö–ê–ó–´–í–ê–ï–ú –ü–û–õ–ù–´–ô –û–¢–í–ï–¢
            this.displayAPIResponse(data);
            if (this.logger) {
                this.logger.addStep('–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OpenAI', {
                    tokensUsed: data.usage?.total_tokens,
                    model: data.model,
                    responseLength: data.choices[0]?.message?.content?.length
                });
            }

            const content = data.choices[0].message.content;

            // 5. –ü–û–ö–ê–ó–´–í–ê–ï–ú –û–ë–†–ê–ë–û–¢–ö–£
            const processedResult = this.processResponse(content, operationName);
            this.displayProcessedResult(processedResult, operationName);
            
            if (this.logger) {
                this.logger.addStep('–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω', processedResult);
                this.logger.endOperation(processedResult);
            }

            return processedResult;

        } catch (error) {
            if (this.logger) {
                this.logger.endOperation(null, error.message);
            }
            
            this.displayError(error);
            throw error;
        }
    }

    displayPrompt(messages) {
        const systemMessage = messages.find(m => m.role === 'system');
        const userMessage = messages.find(m => m.role === 'user');
        
        let promptText = '';
        if (systemMessage) {
            promptText += `–°–ò–°–¢–ï–ú–ù–´–ô –ü–†–û–ú–ü–¢:\n${systemMessage.content}\n\n`;
        }
        if (userMessage) {
            promptText += `–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ô –ó–ê–ü–†–û–°:\n${userMessage.content}`;
        }
        
        this.logger?.updatePromptDisplay(promptText);
        this.activateTransparencySection('prompt');
    }

    displayAPIRequest(requestData) {
        this.logger?.updateAPIRequestDisplay(requestData);

        const stats = document.getElementById('responseStats');
        if (stats) {
            stats.textContent = `–ú–æ–¥–µ–ª—å: ${requestData.model} | –¢–æ–∫–µ–Ω—ã: ${requestData.max_tokens} | –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${requestData.temperature}`;
        }

        this.activateTransparencySection('request');
    }

    displayAPIResponse(data) {
        this.logger?.updateAPIResponseDisplay(data);

        const stats = document.getElementById('responseStats');
        if (stats) {
            const usage = data.usage || {};
            stats.textContent = `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: ${usage.total_tokens || '–Ω/–¥'} | –í—Ö–æ–¥–Ω—ã—Ö: ${usage.prompt_tokens || '–Ω/–¥'} | –í—ã—Ö–æ–¥–Ω—ã—Ö: ${usage.completion_tokens || '–Ω/–¥'}`;
        }

        this.activateTransparencySection('response');
    }

    displayProcessedResult(result, operationName) {
        const processInfo = {
            operation: operationName,
            timestamp: new Date().toISOString(),
            resultType: typeof result,
            processedData: result
        };
        
        this.logger?.updateProcessedResultDisplay(processInfo);
        this.activateTransparencySection('result');
    }

    processResponse(content, operationName) {
        try {
            let cleanContent = content.trim();
            
            cleanContent = cleanContent.replace(/```json\n?/g, '').replace(/```\n?/g, '');
            
            const jsonMatch = cleanContent.match(/\{[\s\S]*\}/);
            if (jsonMatch) {
                const parsed = JSON.parse(jsonMatch[0]);
                return {
                    success: true,
                    operation: operationName,
                    rawContent: content,
                    parsedData: parsed,
                    processingMethod: 'JSON extraction'
                };
            }
            
            return {
                success: false,
                operation: operationName,
                rawContent: content,
                parsedData: null,
                processingMethod: 'raw text',
                error: 'JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ'
            };
            
        } catch (error) {
            return {
                success: false,
                operation: operationName,
                rawContent: content,
                parsedData: null,
                processingMethod: 'error',
                error: error.message
            };
        }
    }

    displayError(error) {
        const errorInfo = `–û–®–ò–ë–ö–ê: ${error.message}\n–í—Ä–µ–º—è: ${new Date().toISOString()}`;
        
        this.logger?.updatePromptDisplay(errorInfo);
        this.logger?.updateAPIRequestDisplay({ error: error.message, timestamp: new Date().toISOString() });
        this.logger?.updateAPIResponseDisplay(errorInfo);
        this.logger?.updateProcessedResultDisplay({ error: error.message, timestamp: new Date().toISOString() });
    }

    activateTransparencySection(section) {
        document.querySelectorAll('.transparency-section').forEach(el => {
            el.classList.remove('active');
        });

        const sectionMap = { 'prompt': 0, 'request': 1, 'response': 2, 'result': 3 };
        const sections = document.querySelectorAll('.transparency-section');
        const targetSection = sections[sectionMap[section]];
        if (targetSection) {
            targetSection.classList.add('active');
            targetSection.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        }
    }
}

// AI –ê–≥–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
class CompetitorPriceAgent {
    constructor(openaiService, logger) {
        this.openaiService = openaiService;
        this.logger = logger;
        this.customPrompt = null;
    }

    getSystemPrompt(productName) {
        if (this.customPrompt) {
            return this.customPrompt.replace('{PRODUCT_NAME}', productName);
        }

        return `–°–ò–°–¢–ï–ú–ê: –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –ø–æ–∏—Å–∫—É —Ü–µ–Ω —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞—Ö

–ó–ê–î–ê–ß–ê: –ù–∞–π—Ç–∏ –†–ï–ê–õ–¨–ù–£–Æ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –Ω–∞ —Ç–æ–≤–∞—Ä "${productName}" —É —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤

–ê–õ–ì–û–†–ò–¢–ú –ü–û–ò–°–ö–ê:
1. –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞—Ö
2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–ª–æ—â–∞–¥–∫–∏: Wildberries, Ozon, –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç, DNS, –ú.–í–∏–¥–µ–æ, –°–∏—Ç–∏–ª–∏–Ω–∫, –≠–ª—å–¥–æ—Ä–∞–¥–æ
3. –ù–∞–π—Ç–∏ –†–ï–ê–õ–¨–ù–´–ï —Ü–µ–Ω—ã —Å –ê–ö–¢–£–ê–õ–¨–ù–´–ú–ò –¥–∞–Ω–Ω—ã–º–∏
4. –í—ã–±—Ä–∞—Ç—å –ú–ò–ù–ò–ú–ê–õ–¨–ù–£–Æ —Ü–µ–Ω—É —Å—Ä–µ–¥–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö

–°–¢–†–û–ì–ò–ô –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (–¢–û–õ–¨–ö–û JSON):
{
  "success": true,
  "productName": "${productName}",
  "searchTimestamp": "${new Date().toISOString()}",
  "minPrice": 89990,
  "currency": "RUB",
  "bestOffer": {
    "siteName": "Wildberries",
    "price": 89990,
    "productUrl": "https://wildberries.ru/catalog/12345/detail.aspx",
    "productTitle": "–¢–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∞–π—Ç–µ",
    "availability": "–≤ –Ω–∞–ª–∏—á–∏–∏",
    "deliveryInfo": "–¥–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–≤—Ç—Ä–∞"
  },
  "allOffers": [
    {
      "siteName": "Wildberries",
      "price": 89990,
      "productUrl": "https://wildberries.ru/catalog/12345/detail.aspx",
      "availability": "–≤ –Ω–∞–ª–∏—á–∏–∏"
    },
    {
      "siteName": "Ozon", 
      "price": 92000,
      "productUrl": "https://ozon.ru/product/iphone-15-pro-123456",
      "availability": "–≤ –Ω–∞–ª–∏—á–∏–∏"
    }
  ],
  "searchSummary": {
    "totalSitesChecked": 7,
    "sitesWithProduct": 5,
    "priceRange": "89990 - 95000 —Ä—É–±",
    "averagePrice": 91995,
    "searchMethod": "–∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Å–∞–π—Ç–∞–º"
  }
}

–ï–°–õ–ò —Ç–æ–≤–∞—Ä –ù–ï –ù–ê–ô–î–ï–ù:
{
  "success": false,
  "productName": "${productName}",
  "message": "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω —É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞",
  "searchDetails": "–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–∏—Å–∫–∞",
  "searchSummary": {
    "totalSitesChecked": 7,
    "sitesWithProduct": 0,
    "searchMethod": "–ø–æ–∏—Å–∫ –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º –ø–ª–æ—â–∞–¥–∫–∞–º"
  }
}

–í–ê–ñ–ù–û: 
- –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–∞—Ö
- –ù–ï –≤—ã–¥—É–º—ã–≤–∞–π —Ü–µ–Ω—ã –∏–ª–∏ —Å—Å—ã–ª–∫–∏
- –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã - –≤–µ—Ä–Ω–∏ success: false
- –í–°–ï URL –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –†–ï–ê–õ–¨–ù–´–ú–ò`;
    }

    async searchPrice(productName) {
        const systemPrompt = this.getSystemPrompt(productName);
        const messages = [
            { role: 'system', content: systemPrompt },
            { role: 'user', content: `–ù–∞–π–¥–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ "${productName}" —É —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.` }
        ];

        const result = await this.openaiService.makeRequest(messages, `–ü–æ–∏—Å–∫ —Ü–µ–Ω –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: ${productName}`);
        return result;
    }

    setCustomPrompt(prompt) {
        this.customPrompt = prompt;
        this.logger.log('–ü–†–û–ú–ü–¢', '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω', 'info');
    }

    resetPrompt() {
        this.customPrompt = null;
        this.logger.log('–ü–†–û–ú–ü–¢', '–°–±—Ä–æ—Å –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –ø—Ä–æ–º–ø—Ç—É –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω', 'info');
    }
}

// AI –ê–≥–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –±/—É —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ Avito
class AvitoSearchAgent {
    constructor(openaiService, logger) {
        this.openaiService = openaiService;
        this.logger = logger;
    }

    getSystemPrompt(productName) {
        return `–°–ò–°–¢–ï–ú–ê: –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –ø–æ–∏—Å–∫—É –±/—É —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ Avito.ru

–ó–ê–î–ê–ß–ê: –ù–∞–π—Ç–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –±/—É —Ç–æ–≤–∞—Ä–∞ "${productName}" –Ω–∞ Avito.ru

–ê–õ–ì–û–†–ò–¢–ú:
1. –ü–æ–∏—Å–∫ –¢–û–õ–¨–ö–û –Ω–∞ avito.ru –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏
2. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–µ–Ω–µ –æ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π
3. –ê–Ω–∞–ª–∏–∑ –¢–û–õ–¨–ö–û –±/—É —Ç–æ–≤–∞—Ä–æ–≤ (–Ω–µ –Ω–æ–≤—ã—Ö)
4. –í—ã–±–æ—Ä –ª—É—á—à–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π

–°–¢–†–û–ì–ò–ô –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (–¢–û–õ–¨–ö–û JSON):
{
  "success": true,
  "productName": "${productName}",
  "searchUrl": "https://www.avito.ru/rossiya?q=${encodeURIComponent(productName)}&s=104",
  "searchTimestamp": "${new Date().toISOString()}",
  "minPrice": 45000,
  "currency": "RUB",
  "bestOffer": {
    "title": "–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
    "price": 45000,
    "location": "–ú–æ—Å–∫–≤–∞",
    "url": "https://avito.ru/moskva/...",
    "seller": "—á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ",
    "condition": "–±/—É",
    "description": "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
  },
  "allOffers": [
    {
      "title": "–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è 1",
      "price": 45000,
      "location": "–ú–æ—Å–∫–≤–∞",
      "url": "https://avito.ru/link1",
      "condition": "–±/—É"
    },
    {
      "title": "–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è 2",
      "price": 47000,
      "location": "–°–ü–±",
      "url": "https://avito.ru/link2", 
      "condition": "–±/—É"
    }
  ],
  "searchSummary": {
    "totalOffersFound": 25,
    "priceRange": "45000 - 65000 —Ä—É–±",
    "averagePrice": 52000,
    "topCities": ["–ú–æ—Å–∫–≤–∞", "–°–ü–±", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥"]
  }
}

–ï–°–õ–ò —Ç–æ–≤–∞—Ä –ù–ï –ù–ê–ô–î–ï–ù:
{
  "success": false,
  "productName": "${productName}",
  "message": "–ë/—É —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ Avito",
  "searchUrl": "https://www.avito.ru/rossiya?q=${encodeURIComponent(productName)}",
  "searchDetails": "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"
}`;
    }

    async searchUsedPrice(productName) {
        const systemPrompt = this.getSystemPrompt(productName);
        const messages = [
            { role: 'system', content: systemPrompt },
            { role: 'user', content: `–ù–∞–π–¥–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –±/—É —Ç–æ–≤–∞—Ä–∞ "${productName}" –Ω–∞ Avito.ru –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏.` }
        ];

        const result = await this.openaiService.makeRequest(messages, `–ü–æ–∏—Å–∫ –±/—É —Ü–µ–Ω –Ω–∞ Avito: ${productName}`);
        return result;
    }
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class TransparentAIPriceAnalyzer {
    constructor() {
        this.logger = new TransparencyLogger();
        this.products = [];
        this.selectedProducts = new Set();
        this.settings = {
            openaiApiKey: '',
            openaiModel: CONFIG.DEFAULT_MODEL
        };
        this.openaiService = null;
        this.competitorAgent = null;
        this.avitoAgent = null;
        this.isProcessing = false;
        this.init();
    }

    init() {
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => this.setupApp());
        } else {
            this.setupApp();
        }
    }

    setupApp() {
        console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã AI Price Analyzer');
        
        this.loadSettings();
        this.setupEventListeners();
        this.renderProducts();
        this.updateUI();
        this.logger.log('–°–ò–°–¢–ï–ú–ê', 'AI Price Analyzer –∑–∞–ø—É—â–µ–Ω —Å –ø–æ–ª–Ω–æ–π –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é', 'info');
        
        if (this.settings.openaiApiKey) {
            this.initializeAIServices();
        }

        console.log('‚úÖ –ü—Ä–æ–∑—Ä–∞—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ');
    }

    setupEventListeners() {
        console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π');
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        this.bindEvent('saveSettings', 'click', () => this.saveSettings());
        this.bindEvent('testConnection', 'click', () => this.testConnection());
        
        // –¢–æ–≤–∞—Ä—ã - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
        this.bindEvent('addProductBtn', 'click', () => {
            console.log('–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞');
            this.logger.log('UI', '–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞', 'info');
            this.showAddProductModal();
        });
        
        this.bindEvent('addTestData', 'click', () => {
            console.log('–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
            this.logger.log('UI', '–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö', 'info');
            this.addTestProducts();
        });
        
        this.bindEvent('productSearch', 'input', (e) => this.filterProducts(e.target.value));
        
        // –í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤
        this.bindEvent('selectAll', 'change', (e) => this.toggleSelectAll(e.target.checked));
        this.bindEvent('selectAllBtn', 'click', () => this.selectAll());
        this.bindEvent('clearSelection', 'click', () => this.clearSelection());
        this.bindEvent('deleteSelected', 'click', () => this.deleteSelected());
        
        // AI –∫–æ–º–∞–Ω–¥—ã
        this.bindEvent('executeCommand', 'click', () => this.executeTextCommand());
        this.bindEvent('commandInput', 'keypress', (e) => {
            if (e.key === 'Enter') {
                this.executeTextCommand();
            }
        });
        
        // –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã
        document.querySelectorAll('.command-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                const command = btn.dataset.command;
                this.executeCommand(command);
            });
        });
        
        // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
        this.bindEvent('saveNewProduct', 'click', () => this.saveNewProduct());
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        document.querySelectorAll('.modal-close').forEach(btn => {
            btn.addEventListener('click', () => this.hideModals());
        });
        
        // Backdrop clicks
        document.querySelectorAll('.modal__backdrop').forEach(backdrop => {
            backdrop.addEventListener('click', () => this.hideModals());
        });
        
        // –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
        this.bindEvent('editPromptBtn', 'click', () => this.showEditPromptModal());
        this.bindEvent('resetPromptBtn', 'click', () => this.resetPrompt());
        this.bindEvent('copyRequestBtn', 'click', () => this.copyToClipboard('apiRequestDisplay'));
        this.bindEvent('copyResponseBtn', 'click', () => this.copyToClipboard('apiResponseDisplay'));
        this.bindEvent('copyResultBtn', 'click', () => this.copyToClipboard('processedResultDisplay'));
        
        // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
        this.bindEvent('saveCustomPrompt', 'click', () => this.saveCustomPrompt());
        this.bindEvent('resetCustomPrompt', 'click', () => this.resetCustomPrompt());
        
        // –õ–æ–≥
        this.bindEvent('clearLog', 'click', () => this.clearLog());
        this.bindEvent('exportLog', 'click', () => this.exportLog());
        this.bindEvent('logFilter', 'change', () => this.logger.renderLogs());
        
        // –¢–µ–º–∞
        this.bindEvent('themeToggle', 'click', () => this.toggleTheme());
        
        console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
        this.logger.log('–°–ò–°–¢–ï–ú–ê', '–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã', 'success');
    }

    bindEvent(id, event, handler) {
        const element = document.getElementById(id);
        if (element) {
            element.addEventListener(event, handler);
            console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è ${id} –¥–æ–±–∞–≤–ª–µ–Ω`);
        } else {
            console.warn(`‚ùå Element ${id} not found`);
        }
    }

    initializeAIServices() {
        this.openaiService = new TransparentOpenAIService(
            this.settings.openaiApiKey,
            this.settings.openaiModel
        );
        
        this.openaiService.setLogger(this.logger);
        
        this.competitorAgent = new CompetitorPriceAgent(this.openaiService, this.logger);
        this.avitoAgent = new AvitoSearchAgent(this.openaiService, this.logger);

        this.updateSystemStatus('success', 'AI —Å–µ—Ä–≤–∏—Å—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã —Å –ø–æ–ª–Ω–æ–π –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é');
        this.enableAIControls();
        
        this.logger.log('–°–ò–°–¢–ï–ú–ê', 'AI —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å –ª–æ–≥–≥–µ—Ä–æ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏', 'success');
    }

    enableAIControls() {
        const executeBtn = document.getElementById('executeCommand');
        if (executeBtn) {
            executeBtn.removeAttribute('disabled');
            executeBtn.classList.remove('btn--loading');
        }
        
        document.querySelectorAll('.command-btn').forEach(btn => {
            btn.removeAttribute('disabled');
            btn.classList.remove('btn--loading');
        });
        
        const editPromptBtn = document.getElementById('editPromptBtn');
        const resetPromptBtn = document.getElementById('resetPromptBtn');
        if (editPromptBtn) editPromptBtn.removeAttribute('disabled');
        if (resetPromptBtn) resetPromptBtn.removeAttribute('disabled');
        
        this.updateAIAgentStatus('success', '–ê–≥–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–Ω—ã —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é');
    }

    async saveSettings() {
        const apiKey = document.getElementById('openaiApiKey')?.value.trim();
        const model = document.getElementById('openaiModel')?.value;

        if (!apiKey) {
            this.showNotification('–û—à–∏–±–∫–∞', '–í–≤–µ–¥–∏—Ç–µ OpenAI API –∫–ª—é—á', 'error');
            return;
        }

        if (!apiKey.startsWith('sk-')) {
            this.showNotification('–û—à–∏–±–∫–∞', '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API –∫–ª—é—á–∞', 'error');
            return;
        }

        this.settings.openaiApiKey = apiKey;
        this.settings.openaiModel = model || CONFIG.DEFAULT_MODEL;

        this.storeSettings();
        this.initializeAIServices();
        
        this.showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
        this.logger.log('–ù–ê–°–¢–†–û–ô–ö–ò', `API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: –º–æ–¥–µ–ª—å ${model}`, 'info');
    }

    async testConnection() {
        if (!this.openaiService) {
            this.updateApiStatus('error', 'API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            return;
        }

        this.updateApiStatus('testing', '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
        this.logger.log('API', '–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI', 'info');

        try {
            const messages = [
                { role: 'user', content: '–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –û—Ç–≤–µ—Ç—å –ø—Ä–æ—Å—Ç–æ "OK".' }
            ];
            
            const result = await this.openaiService.makeRequest(messages, '–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI API');
            
            this.updateApiStatus('success', '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');
            this.showNotification('–¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω', '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI API —Ä–∞–±–æ—Ç–∞–µ—Ç', 'success');
            this.logger.log('API', '–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å–ø–µ—à–µ–Ω', 'success');
            
        } catch (error) {
            this.updateApiStatus('error', error.message);
            this.showNotification('–¢–µ—Å—Ç –Ω–µ—É–¥–∞—á–µ–Ω', error.message, 'error');
            this.logger.log('API', `–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ—É–¥–∞—á–µ–Ω: ${error.message}`, 'error');
        }
    }

    // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    addTestProducts() {
        console.log('üß™ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤...');
        this.logger.log('–¢–û–í–ê–†–´', 'üß™ –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤', 'info');
        
        try {
            let addedCount = 0;
            CONFIG.TEST_PRODUCTS.forEach((productData, index) => {
                const newProduct = {
                    id: Date.now() + index + Math.random(),
                    name: productData.name,
                    description: productData.description,
                    quantity: productData.quantity,
                    purchasePrice: productData.purchasePrice,
                    salePrice: productData.salePrice,
                    competitorNewPrice: null,
                    competitorUsedPrice: null,
                    lastUpdated: new Date().toISOString()
                };
                
                this.products.push(newProduct);
                addedCount++;
                console.log(`–î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä: ${newProduct.name}`);
            });

            console.log(`–í—Å–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${addedCount}`);
            console.log('–¢–µ–∫—É—â–∏–µ —Ç–æ–≤–∞—Ä—ã:', this.products);

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            this.renderProducts();
            this.updateUI();
            this.storeSettings();

            this.showNotification('–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã', `–î–æ–±–∞–≤–ª–µ–Ω–æ ${addedCount} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤`, 'success');
            this.logger.log('–¢–û–í–ê–†–´', `‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ${addedCount} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤`, 'success');
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:', error);
            this.logger.log('–¢–û–í–ê–†–´', `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: ${error.message}`, 'error');
            this.showNotification('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã', 'error');
        }
    }

    async executeCommand(commandText) {
        if (!this.openaiService) {
            this.showNotification('–û—à–∏–±–∫–∞', '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ OpenAI API', 'error');
            return;
        }

        if (this.isProcessing) {
            this.showNotification('–û–±—Ä–∞–±–æ—Ç–∫–∞', '–ü—Ä–µ–¥—ã–¥—É—â–∞—è –∫–æ–º–∞–Ω–¥–∞ –µ—â–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è', 'warning');
            return;
        }

        this.isProcessing = true;
        this.showExecutionStatus(true, `–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: ${commandText}`);
        this.logger.log('–ö–û–ú–ê–ù–î–ê', `üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: "${commandText}"`, 'ai');

        try {
            const lowerCommand = commandText.toLowerCase();
            
            if (lowerCommand.includes('–ø–æ–∏—Å–∫ —Ü–µ–Ω —É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤') || lowerCommand.includes('–Ω–∞–π–¥–∏ —Ü–µ–Ω—É')) {
                await this.handleCompetitorSearch();
            } else if (lowerCommand.includes('–ø–æ–∏—Å–∫ –±/—É') || lowerCommand.includes('–∞–≤–∏—Ç–æ')) {
                await this.handleAvitoSearch();
            } else if (lowerCommand.includes('–æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Ü–µ–Ω—ã')) {
                await this.updateAllPrices();
            } else {
                this.showNotification('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞', '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: –ø–æ–∏—Å–∫ —Ü–µ–Ω, –ø–æ–∏—Å–∫ –±/—É, –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ', 'warning');
                this.logger.log('–ö–û–ú–ê–ù–î–ê', `‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: "${commandText}"`, 'warning');
            }
            
        } catch (error) {
            this.showNotification('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', error.message, 'error');
            this.logger.log('–ö–û–ú–ê–ù–î–ê', `‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${error.message}`, 'error');
        } finally {
            this.isProcessing = false;
            this.showExecutionStatus(false);
        }
    }

    async handleCompetitorSearch() {
        const selectedIds = Array.from(this.selectedProducts);
        
        if (selectedIds.length === 0) {
            this.showNotification('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã', '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω', 'warning');
            return;
        }

        this.logger.log('–ü–û–ò–°–ö', `–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Ü–µ–Ω –¥–ª—è ${selectedIds.length} —Ç–æ–≤–∞—Ä(–æ–≤)`, 'ai');

        for (const productId of selectedIds) {
            const product = this.products.find(p => p.id === productId);
            if (product) {
                await this.searchCompetitorPrice(product);
                await new Promise(resolve => setTimeout(resolve, 2000));
            }
        }

        this.logger.log('–ü–û–ò–°–ö', `‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω –ø–æ–∏—Å–∫ —Ü–µ–Ω –¥–ª—è –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤`, 'success');
    }

    async handleAvitoSearch() {
        const selectedIds = Array.from(this.selectedProducts);
        
        if (selectedIds.length === 0) {
            this.showNotification('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã', '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –±/—É —Ü–µ–Ω', 'warning');
            return;
        }

        this.logger.log('–ü–û–ò–°–ö', `–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –±/—É —Ü–µ–Ω –¥–ª—è ${selectedIds.length} —Ç–æ–≤–∞—Ä(–æ–≤)`, 'ai');

        for (const productId of selectedIds) {
            const product = this.products.find(p => p.id === productId);
            if (product) {
                await this.searchAvitoPrice(product);
                await new Promise(resolve => setTimeout(resolve, 2000));
            }
        }

        this.logger.log('–ü–û–ò–°–ö', `‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω –ø–æ–∏—Å–∫ –±/—É —Ü–µ–Ω –¥–ª—è –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤`, 'success');
    }

    async searchCompetitorPrice(product) {
        this.logger.log('–ü–û–ò–°–ö', `üîç –ü–æ–∏—Å–∫ —Ü–µ–Ω –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –¥–ª—è "${product.name}"`, 'ai');
        
        try {
            const result = await this.competitorAgent.searchPrice(product.name);
            
            if (result.success && result.parsedData && result.parsedData.success) {
                const priceData = result.parsedData;
                product.competitorNewPrice = priceData.minPrice;
                product.lastUpdated = new Date().toISOString();
                
                this.renderProducts();
                this.storeSettings();
                
                this.showNotification('–¶–µ–Ω—ã –Ω–∞–π–¥–µ–Ω—ã', `${product.name}: ${this.formatPrice(priceData.minPrice)}`, 'success');
                this.logger.log('–ü–û–ò–°–ö', `‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ ${priceData.minPrice} —Ä—É–± –¥–ª—è "${product.name}"`, 'success');
                
            } else {
                const errorMsg = result.parsedData?.message || result.error || '–¶–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã';
                this.showNotification('–¶–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', `${product.name}: ${errorMsg}`, 'warning');
                this.logger.log('–ü–û–ò–°–ö', `‚ùå –¶–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è "${product.name}": ${errorMsg}`, 'warning');
            }
            
        } catch (error) {
            this.logger.log('–ü–û–ò–°–ö', `‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω –¥–ª—è "${product.name}": ${error.message}`, 'error');
            throw error;
        }
    }

    async searchAvitoPrice(product) {
        this.logger.log('–ü–û–ò–°–ö', `üõí –ü–æ–∏—Å–∫ –±/—É —Ü–µ–Ω –Ω–∞ Avito –¥–ª—è "${product.name}"`, 'ai');
        
        try {
            const result = await this.avitoAgent.searchUsedPrice(product.name);
            
            if (result.success && result.parsedData && result.parsedData.success) {
                const priceData = result.parsedData;
                product.competitorUsedPrice = priceData.minPrice;
                product.lastUpdated = new Date().toISOString();
                
                this.renderProducts();
                this.storeSettings();
                
                this.showNotification('–ë/—É —Ü–µ–Ω—ã –Ω–∞–π–¥–µ–Ω—ã', `${product.name}: ${this.formatPrice(priceData.minPrice)}`, 'success');
                this.logger.log('–ü–û–ò–°–ö', `‚úÖ –ù–∞–π–¥–µ–Ω–∞ –±/—É —Ü–µ–Ω–∞ ${priceData.minPrice} —Ä—É–± –¥–ª—è "${product.name}"`, 'success');
                
            } else {
                const errorMsg = result.parsedData?.message || result.error || '–ë/—É —Ü–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã';
                this.showNotification('–ë/—É —Ü–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', `${product.name}: ${errorMsg}`, 'warning');
                this.logger.log('–ü–û–ò–°–ö', `‚ùå –ë/—É —Ü–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è "${product.name}": ${errorMsg}`, 'warning');
            }
            
        } catch (error) {
            this.logger.log('–ü–û–ò–°–ö', `‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –±/—É —Ü–µ–Ω –¥–ª—è "${product.name}": ${error.message}`, 'error');
            throw error;
        }
    }

    async updateAllPrices() {
        if (this.products.length === 0) {
            this.showNotification('–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤', '–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω', 'warning');
            return;
        }

        this.logger.log('–°–ò–°–¢–ï–ú–ê', `üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è ${this.products.length} —Ç–æ–≤–∞—Ä–æ–≤`, 'ai');
        
        for (const product of this.products) {
            await this.searchCompetitorPrice(product);
            await new Promise(resolve => setTimeout(resolve, 2000));
        }
        
        this.showNotification('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ', '–¶–µ–Ω—ã –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', 'success');
        this.logger.log('–°–ò–°–¢–ï–ú–ê', '‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ', 'success');
    }

    executeTextCommand() {
        const input = document.getElementById('commandInput');
        const command = input?.value.trim();
        
        if (command) {
            this.executeCommand(command);
            input.value = '';
        }
    }

    // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï - –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
    showAddProductModal() {
        console.log('üìù –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞');
        this.logger.log('UI', '–û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞', 'info');
        
        const modal = document.getElementById('addProductModal');
        if (modal) {
            modal.classList.remove('hidden');
            console.log('‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ');
            this.logger.log('UI', '‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –æ—Ç–∫—Ä—ã—Ç–æ', 'success');
        } else {
            console.error('‚ùå –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            this.logger.log('UI', '‚ùå –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', 'error');
        }
    }

    saveNewProduct() {
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞');
        
        const name = document.getElementById('newProductName')?.value.trim();
        const description = document.getElementById('newProductDescription')?.value.trim() || '';
        const quantity = parseInt(document.getElementById('newProductQuantity')?.value) || 1;
        const purchasePrice = parseFloat(document.getElementById('newProductPurchasePrice')?.value) || 0;
        const salePrice = parseFloat(document.getElementById('newProductSalePrice')?.value) || 0;

        if (!name) {
            this.showNotification('–û—à–∏–±–∫–∞', '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', 'error');
            return;
        }

        const newProduct = {
            id: Date.now(),
            name,
            description,
            quantity,
            purchasePrice,
            salePrice,
            competitorNewPrice: null,
            competitorUsedPrice: null,
            lastUpdated: new Date().toISOString()
        };

        this.products.push(newProduct);
        this.renderProducts();
        this.updateUI();
        this.storeSettings();
        this.hideModals();

        // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
        const form = document.getElementById('addProductForm');
        if (form) form.reset();

        this.showNotification('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω', `–¢–æ–≤–∞—Ä "${name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω`, 'success');
        this.logger.log('–¢–û–í–ê–†–´', `–î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä "${name}"`, 'success');
        
        console.log('‚úÖ –¢–æ–≤–∞—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
    }

    deleteSelected() {
        const selectedIds = Array.from(this.selectedProducts);
        if (selectedIds.length === 0) {
            this.showNotification('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã', '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', 'warning');
            return;
        }

        if (confirm(`–£–¥–∞–ª–∏—Ç—å ${selectedIds.length} —Ç–æ–≤–∞—Ä(–æ–≤)?`)) {
            this.products = this.products.filter(p => !selectedIds.includes(p.id));
            this.selectedProducts.clear();
            this.renderProducts();
            this.updateUI();
            this.storeSettings();

            this.showNotification('–¢–æ–≤–∞—Ä—ã —É–¥–∞–ª–µ–Ω—ã', `–£–¥–∞–ª–µ–Ω–æ ${selectedIds.length} —Ç–æ–≤–∞—Ä(–æ–≤)`, 'success');
            this.logger.log('–¢–û–í–ê–†–´', `–£–¥–∞–ª–µ–Ω–æ ${selectedIds.length} —Ç–æ–≤–∞—Ä(–æ–≤)`, 'info');
        }
    }

    selectAll() {
        this.selectedProducts.clear();
        this.products.forEach(product => {
            this.selectedProducts.add(product.id);
        });
        this.renderProducts();
        this.updateUI();
    }

    clearSelection() {
        this.selectedProducts.clear();
        this.renderProducts();
        this.updateUI();
    }

    toggleSelectAll(checked) {
        if (checked) {
            this.selectAll();
        } else {
            this.clearSelection();
        }
    }

    // –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –ø—Ä–æ–º–ø—Ç–æ–≤
    showEditPromptModal() {
        const currentPrompt = this.competitorAgent ? this.competitorAgent.customPrompt || this.competitorAgent.getSystemPrompt('{PRODUCT_NAME}') : '';
        const editablePrompt = document.getElementById('editablePrompt');
        if (editablePrompt) editablePrompt.value = currentPrompt;
        this.showModal('editPromptModal');
    }

    saveCustomPrompt() {
        const customPrompt = document.getElementById('editablePrompt')?.value.trim();
        if (customPrompt && this.competitorAgent) {
            this.competitorAgent.setCustomPrompt(customPrompt);
            this.hideModals();
            this.showNotification('–ü—Ä–æ–º–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω', '–ö–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω', 'success');
        }
    }

    resetCustomPrompt() {
        if (this.competitorAgent) {
            this.competitorAgent.resetPrompt();
            this.hideModals();
            this.showNotification('–ü—Ä–æ–º–ø—Ç —Å–±—Ä–æ—à–µ–Ω', '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç', 'info');
        }
    }

    resetPrompt() {
        this.resetCustomPrompt();
    }

    copyToClipboard(elementId) {
        const element = document.getElementById(elementId);
        if (element) {
            const text = element.textContent || element.value;
            navigator.clipboard.writeText(text).then(() => {
                this.showNotification('–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ', '–î–∞–Ω–Ω—ã–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 'success');
            }).catch(() => {
                this.showNotification('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 'error');
            });
        }
    }

    // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï - –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    renderProducts() {
        console.log(`üé® –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤. –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${this.products.length}`);
        
        const tbody = document.getElementById('productsTableBody');
        const emptyState = document.getElementById('emptyState');
        
        if (!tbody || !emptyState) {
            console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }

        if (this.products.length === 0) {
            tbody.innerHTML = '';
            emptyState.style.display = 'block';
            console.log('üìã –ü–æ–∫–∞–∑–∞–Ω –ø—É—Å—Ç–æ–π —Å—Ç–µ–π—Ç');
            return;
        }

        emptyState.style.display = 'none';
        tbody.innerHTML = '';

        this.products.forEach((product, index) => {
            const row = document.createElement('tr');
            row.dataset.productId = product.id;
            
            if (this.selectedProducts.has(product.id)) {
                row.classList.add('selected');
            }

            row.innerHTML = `
                <td>
                    <input type="checkbox" class="product-checkbox" 
                           ${this.selectedProducts.has(product.id) ? 'checked' : ''}
                           data-product-id="${product.id}">
                </td>
                <td class="product-name-cell">${this.escapeHtml(product.name)}</td>
                <td class="product-description-cell">${this.escapeHtml(product.description || '')}</td>
                <td class="quantity-cell">${product.quantity}</td>
                <td class="price-cell">${this.formatPrice(product.purchasePrice)}</td>
                <td class="price-cell">${this.formatPrice(product.salePrice)}</td>
                <td class="price-cell ${product.competitorNewPrice ? 'updated' : ''}">${this.formatPrice(product.competitorNewPrice)}</td>
                <td class="price-cell ${product.competitorUsedPrice ? 'updated' : ''}">${this.formatPrice(product.competitorUsedPrice)}</td>
                <td class="date-cell">${this.formatDate(product.lastUpdated)}</td>
                <td class="actions-cell">
                    <button class="action-btn action-btn--primary" onclick="priceAnalyzer.searchProductPrices(${product.id})">üîç</button>
                    <button class="action-btn" onclick="priceAnalyzer.editProduct(${product.id})">‚úèÔ∏è</button>
                    <button class="action-btn action-btn--danger" onclick="priceAnalyzer.deleteProduct(${product.id})">üóëÔ∏è</button>
                </td>
            `;

            tbody.appendChild(row);
            console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞: ${product.name}`);
        });

        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —á–µ–∫–±–æ–∫—Å–æ–≤
        tbody.querySelectorAll('.product-checkbox').forEach(checkbox => {
            checkbox.addEventListener('change', (e) => {
                const productId = parseInt(e.target.dataset.productId);
                if (e.target.checked) {
                    this.selectedProducts.add(productId);
                } else {
                    this.selectedProducts.delete(productId);
                }
                this.renderProducts();
                this.updateUI();
            });
        });
        
        console.log('‚úÖ –¢–æ–≤–∞—Ä—ã –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω—ã');
        this.logger.log('UI', `–û—Ç—Ä–∏—Å–æ–≤–∞–Ω–æ ${this.products.length} —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ`, 'success');
    }

    updateUI() {
        this.updateElement('totalProducts', this.products.length);
        this.updateElement('selectedCount', this.selectedProducts.size);

        const deleteBtn = document.getElementById('deleteSelected');
        if (deleteBtn) {
            deleteBtn.disabled = this.selectedProducts.size === 0;
        }

        const selectAllCheckbox = document.getElementById('selectAll');
        if (selectAllCheckbox) {
            selectAllCheckbox.checked = this.products.length > 0 && this.selectedProducts.size === this.products.length;
            selectAllCheckbox.indeterminate = this.selectedProducts.size > 0 && this.selectedProducts.size < this.products.length;
        }
    }

    updateElement(id, value) {
        const element = document.getElementById(id);
        if (element) {
            element.textContent = value;
        }
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
    async searchProductPrices(productId) {
        const product = this.products.find(p => p.id === productId);
        if (product && this.openaiService) {
            this.selectedProducts.clear();
            this.selectedProducts.add(productId);
            await this.handleCompetitorSearch();
        }
    }

    editProduct(productId) {
        const product = this.products.find(p => p.id === productId);
        if (product) {
            const newName = prompt('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:', product.name);
            if (newName && newName.trim()) {
                product.name = newName.trim();
                product.lastUpdated = new Date().toISOString();
                this.renderProducts();
                this.storeSettings();
                this.logger.log('–¢–û–í–ê–†–´', `–ò–∑–º–µ–Ω–µ–Ω —Ç–æ–≤–∞—Ä: "${newName}"`, 'info');
            }
        }
    }

    deleteProduct(productId) {
        const product = this.products.find(p => p.id === productId);
        if (product && confirm(`–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä "${product.name}"?`)) {
            this.products = this.products.filter(p => p.id !== productId);
            this.selectedProducts.delete(productId);
            this.renderProducts();
            this.updateUI();
            this.storeSettings();
            this.logger.log('–¢–û–í–ê–†–´', `–£–¥–∞–ª–µ–Ω —Ç–æ–≤–∞—Ä: "${product.name}"`, 'info');
        }
    }

    filterProducts(searchText) {
        const rows = document.querySelectorAll('#productsTableBody tr');
        const lowerSearch = searchText.toLowerCase();

        rows.forEach(row => {
            const productName = row.cells[1].textContent.toLowerCase();
            const productDescription = row.cells[2].textContent.toLowerCase();
            const matches = productName.includes(lowerSearch) || productDescription.includes(lowerSearch);
            row.style.display = matches ? '' : 'none';
        });
    }

    // –°—Ç–∞—Ç—É—Å—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    updateSystemStatus(status, message) {
        const element = document.getElementById('systemStatus');
        if (element) {
            element.textContent = message;
            element.className = `status status--${status}`;
        }
    }

    updateApiStatus(status, message) {
        const element = document.getElementById('apiStatus');
        if (element) {
            element.textContent = message;
            element.className = `api-status ${status}`;
        }
    }

    updateAIAgentStatus(status, message) {
        const element = document.getElementById('aiAgentStatus');
        if (element) {
            element.textContent = message;
            element.className = `status status--${status}`;
        }
    }

    showExecutionStatus(show, message = '') {
        const element = document.getElementById('executionStatus');
        const textElement = document.getElementById('executionStatusText');
        
        if (element) {
            element.style.display = show ? 'block' : 'none';
        }
        
        if (textElement && message) {
            textElement.textContent = message;
        }
    }

    // –õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π
    clearLog() {
        if (confirm('–û—á–∏—Å—Ç–∏—Ç—å –∂—É—Ä–Ω–∞–ª –æ–ø–µ—Ä–∞—Ü–∏–π?')) {
            this.logger.logs = [];
            this.logger.renderLogs();
            this.logger.log('–°–ò–°–¢–ï–ú–ê', '–ñ—É—Ä–Ω–∞–ª –æ–ø–µ—Ä–∞—Ü–∏–π –æ—á–∏—â–µ–Ω', 'info');
        }
    }

    exportLog() {
        const blob = new Blob([JSON.stringify(this.logger.logs, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);

        const a = document.createElement('a');
        a.href = url;
        a.download = `transparent_ai_log_${new Date().toISOString().split('T')[0]}.json`;
        a.click();

        URL.revokeObjectURL(url);

        this.showNotification('–õ–æ–≥ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω', '–î–µ—Ç–∞–ª—å–Ω—ã–π –∂—É—Ä–Ω–∞–ª –æ–ø–µ—Ä–∞—Ü–∏–π —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω', 'success');
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    showNotification(title, message, type = 'info') {
        const container = document.getElementById('notificationContainer');
        if (!container) return;

        const notification = document.createElement('div');
        notification.className = `notification notification--${type}`;
        
        notification.innerHTML = `
            <button class="notification__close">√ó</button>
            <h4 class="notification__title">${this.escapeHtml(title)}</h4>
            <p class="notification__message">${this.escapeHtml(message)}</p>
        `;

        container.appendChild(notification);

        const closeBtn = notification.querySelector('.notification__close');
        closeBtn.addEventListener('click', () => {
            notification.remove();
        });

        setTimeout(() => {
            if (notification.parentNode) {
                notification.remove();
            }
        }, 5000);

        notification.addEventListener('click', () => {
            notification.remove();
        });
    }

    // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
    showModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.classList.remove('hidden');
            this.logger.log('UI', `–û—Ç–∫—Ä—ã—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ: ${modalId}`, 'info');
        }
    }

    hideModals() {
        document.querySelectorAll('.modal').forEach(modal => {
            modal.classList.add('hidden');
        });
        this.logger.log('UI', '–ó–∞–∫—Ä—ã—Ç—ã –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞', 'info');
    }

    // –¢–µ–º–∞
    toggleTheme() {
        const currentTheme = document.body.dataset.colorScheme || 'light';
        const newTheme = currentTheme === 'light' ? 'dark' : 'light';
        document.body.dataset.colorScheme = newTheme;
        this.storeTheme(newTheme);
        this.logger.log('UI', `–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${newTheme}`, 'info');
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    storeSettings() {
        window.transparentAIPriceAnalyzerData = {
            products: this.products,
            settings: this.settings,
            logs: this.logger.logs
        };
    }

    loadSettings() {
        const data = window.transparentAIPriceAnalyzerData;
        if (data) {
            this.products = data.products || [];
            this.settings = { ...this.settings, ...data.settings };
            if (data.logs) {
                this.logger.logs = data.logs;
                this.logger.renderLogs();
            }
        }

        const apiKeyInput = document.getElementById('openaiApiKey');
        const modelSelect = document.getElementById('openaiModel');

        if (apiKeyInput) apiKeyInput.value = this.settings.openaiApiKey || '';
        if (modelSelect) modelSelect.value = this.settings.openaiModel || CONFIG.DEFAULT_MODEL;
    }

    storeTheme(theme) {
        window.transparentAITheme = theme;
    }

    // –£—Ç–∏–ª–∏—Ç—ã
    formatPrice(price) {
        if (!price || price === null || price === undefined || isNaN(price)) {
            return '‚Äî';
        }
        return new Intl.NumberFormat('ru-RU', {
            style: 'currency',
            currency: 'RUB',
            minimumFractionDigits: 0,
            maximumFractionDigits: 0
        }).format(price);
    }

    formatDate(dateString) {
        if (!dateString) return '‚Äî';
        
        try {
            const date = new Date(dateString);
            return date.toLocaleString('ru-RU', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        } catch {
            return '‚Äî';
        }
    }

    escapeHtml(text) {
        if (!text) return '';
        const map = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#039;'
        };
        return text.replace(/[&<>"']/g, (m) => map[m]);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let priceAnalyzer;

function initTransparentAIPriceAnalyzer() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã AI Price Analyzer');
    priceAnalyzer = new TransparentAIPriceAnalyzer();
    window.priceAnalyzer = priceAnalyzer;
    console.log('‚úÖ –ü—Ä–æ–∑—Ä–∞—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ');
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initTransparentAIPriceAnalyzer);
} else {
    initTransparentAIPriceAnalyzer();
}
